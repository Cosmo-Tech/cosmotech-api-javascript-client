/**
 * Cosmo Tech Plaform API
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AnalysisParameterGroup from './AnalysisParameterGroup';
import AnalysisResourceStorage from './AnalysisResourceStorage';

/**
 * The SimulatorAnalysis model module.
 * @module model/SimulatorAnalysis
 * @version 0.0.1-SNAPSHOT
 */
class SimulatorAnalysis {
    /**
     * Constructs a new <code>SimulatorAnalysis</code>.
     * a Simulator Analysis run template
     * @alias module:model/SimulatorAnalysis
     * @param id {String} the Simulator Analysis id
     * @param name {String} the Simulator Analysis name
     * @param simulation {String} the simulation name
     */
    constructor(id, name, simulation) { 
        
        SimulatorAnalysis.initialize(this, id, name, simulation);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, name, simulation) { 
        obj['id'] = id;
        obj['name'] = name;
        obj['simulation'] = simulation;
    }

    /**
     * Constructs a <code>SimulatorAnalysis</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SimulatorAnalysis} obj Optional instance to populate.
     * @return {module:model/SimulatorAnalysis} The populated <code>SimulatorAnalysis</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SimulatorAnalysis();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('simulation')) {
                obj['simulation'] = ApiClient.convertToType(data['simulation'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('computeSize')) {
                obj['computeSize'] = ApiClient.convertToType(data['computeSize'], 'String');
            }
            if (data.hasOwnProperty('parametersHandlerResource')) {
                obj['parametersHandlerResource'] = AnalysisResourceStorage.constructFromObject(data['parametersHandlerResource']);
            }
            if (data.hasOwnProperty('datasetValidatorResource')) {
                obj['datasetValidatorResource'] = AnalysisResourceStorage.constructFromObject(data['datasetValidatorResource']);
            }
            if (data.hasOwnProperty('customDriverResource')) {
                obj['customDriverResource'] = AnalysisResourceStorage.constructFromObject(data['customDriverResource']);
            }
            if (data.hasOwnProperty('parameterGroups')) {
                obj['parameterGroups'] = ApiClient.convertToType(data['parameterGroups'], [AnalysisParameterGroup]);
            }
        }
        return obj;
    }


}

/**
 * the Simulator Analysis id
 * @member {String} id
 */
SimulatorAnalysis.prototype['id'] = undefined;

/**
 * the Simulator Analysis name
 * @member {String} name
 */
SimulatorAnalysis.prototype['name'] = undefined;

/**
 * the Simulator Analysis description
 * @member {String} description
 */
SimulatorAnalysis.prototype['description'] = undefined;

/**
 * the simulation name
 * @member {String} simulation
 */
SimulatorAnalysis.prototype['simulation'] = undefined;

/**
 * the list of Simulator Analysis tags
 * @member {Array.<String>} tags
 */
SimulatorAnalysis.prototype['tags'] = undefined;

/**
 * the compute size needed for this Analysis. Standard sizes are basic and highcpu. Default is basic
 * @member {String} computeSize
 */
SimulatorAnalysis.prototype['computeSize'] = undefined;

/**
 * @member {module:model/AnalysisResourceStorage} parametersHandlerResource
 */
SimulatorAnalysis.prototype['parametersHandlerResource'] = undefined;

/**
 * @member {module:model/AnalysisResourceStorage} datasetValidatorResource
 */
SimulatorAnalysis.prototype['datasetValidatorResource'] = undefined;

/**
 * @member {module:model/AnalysisResourceStorage} customDriverResource
 */
SimulatorAnalysis.prototype['customDriverResource'] = undefined;

/**
 * the list of parameters groups for the Analysis
 * @member {Array.<module:model/AnalysisParameterGroup>} parameterGroups
 */
SimulatorAnalysis.prototype['parameterGroups'] = undefined;






export default SimulatorAnalysis;

