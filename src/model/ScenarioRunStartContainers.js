/**
 * Cosmo Tech Plaform API
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ScenarioRunContainer from './ScenarioRunContainer';

/**
 * The ScenarioRunStartContainers model module.
 * @module model/ScenarioRunStartContainers
 * @version 0.0.1-SNAPSHOT
 */
class ScenarioRunStartContainers {
    /**
     * Constructs a new <code>ScenarioRunStartContainers</code>.
     * the parameters to run directly containers
     * @alias module:model/ScenarioRunStartContainers
     */
    constructor() { 
        
        ScenarioRunStartContainers.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ScenarioRunStartContainers</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ScenarioRunStartContainers} obj Optional instance to populate.
     * @return {module:model/ScenarioRunStartContainers} The populated <code>ScenarioRunStartContainers</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ScenarioRunStartContainers();

            if (data.hasOwnProperty('nodeLabel')) {
                obj['nodeLabel'] = ApiClient.convertToType(data['nodeLabel'], 'String');
            }
            if (data.hasOwnProperty('fetchDatasetContainers')) {
                obj['fetchDatasetContainers'] = ApiClient.convertToType(data['fetchDatasetContainers'], [ScenarioRunContainer]);
            }
            if (data.hasOwnProperty('fetchScenarioParametersContainer')) {
                obj['fetchScenarioParametersContainer'] = ScenarioRunContainer.constructFromObject(data['fetchScenarioParametersContainer']);
            }
            if (data.hasOwnProperty('applyParametersContainer')) {
                obj['applyParametersContainer'] = ScenarioRunContainer.constructFromObject(data['applyParametersContainer']);
            }
            if (data.hasOwnProperty('validateDataContainer')) {
                obj['validateDataContainer'] = ScenarioRunContainer.constructFromObject(data['validateDataContainer']);
            }
            if (data.hasOwnProperty('sendDataWarehouseContainer')) {
                obj['sendDataWarehouseContainer'] = ScenarioRunContainer.constructFromObject(data['sendDataWarehouseContainer']);
            }
            if (data.hasOwnProperty('preRunContainer')) {
                obj['preRunContainer'] = ScenarioRunContainer.constructFromObject(data['preRunContainer']);
            }
            if (data.hasOwnProperty('runContainer')) {
                obj['runContainer'] = ScenarioRunContainer.constructFromObject(data['runContainer']);
            }
            if (data.hasOwnProperty('postRunContainer')) {
                obj['postRunContainer'] = ScenarioRunContainer.constructFromObject(data['postRunContainer']);
            }
        }
        return obj;
    }


}

/**
 * the node label request
 * @member {String} nodeLabel
 */
ScenarioRunStartContainers.prototype['nodeLabel'] = undefined;

/**
 * the containers which fetch the Scenario Datasets
 * @member {Array.<module:model/ScenarioRunContainer>} fetchDatasetContainers
 */
ScenarioRunStartContainers.prototype['fetchDatasetContainers'] = undefined;

/**
 * @member {module:model/ScenarioRunContainer} fetchScenarioParametersContainer
 */
ScenarioRunStartContainers.prototype['fetchScenarioParametersContainer'] = undefined;

/**
 * @member {module:model/ScenarioRunContainer} applyParametersContainer
 */
ScenarioRunStartContainers.prototype['applyParametersContainer'] = undefined;

/**
 * @member {module:model/ScenarioRunContainer} validateDataContainer
 */
ScenarioRunStartContainers.prototype['validateDataContainer'] = undefined;

/**
 * @member {module:model/ScenarioRunContainer} sendDataWarehouseContainer
 */
ScenarioRunStartContainers.prototype['sendDataWarehouseContainer'] = undefined;

/**
 * @member {module:model/ScenarioRunContainer} preRunContainer
 */
ScenarioRunStartContainers.prototype['preRunContainer'] = undefined;

/**
 * @member {module:model/ScenarioRunContainer} runContainer
 */
ScenarioRunStartContainers.prototype['runContainer'] = undefined;

/**
 * @member {module:model/ScenarioRunContainer} postRunContainer
 */
ScenarioRunStartContainers.prototype['postRunContainer'] = undefined;






export default ScenarioRunStartContainers;

