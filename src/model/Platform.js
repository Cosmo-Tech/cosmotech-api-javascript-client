/**
 * Cosmo Tech Plaform API
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PlatformServices from './PlatformServices';

/**
 * The Platform model module.
 * @module model/Platform
 * @version 0.0.1-SNAPSHOT
 */
class Platform {
    /**
     * Constructs a new <code>Platform</code>.
     * a Platform
     * @alias module:model/Platform
     * @param name {String} the Platform name
     * @param version {String} the Platform version MAJOR.MINOR.PATCH.
     * @param ownerId {String} the Platform owner Id
     * @param services {module:model/PlatformServices} 
     */
    constructor(name, version, ownerId, services) { 
        
        Platform.initialize(this, name, version, ownerId, services);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, version, ownerId, services) { 
        obj['name'] = name;
        obj['version'] = version;
        obj['ownerId'] = ownerId;
        obj['services'] = services;
    }

    /**
     * Constructs a <code>Platform</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Platform} obj Optional instance to populate.
     * @return {module:model/Platform} The populated <code>Platform</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Platform();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
            if (data.hasOwnProperty('ownerId')) {
                obj['ownerId'] = ApiClient.convertToType(data['ownerId'], 'String');
            }
            if (data.hasOwnProperty('apiHost')) {
                obj['apiHost'] = ApiClient.convertToType(data['apiHost'], 'String');
            }
            if (data.hasOwnProperty('webAppUrl')) {
                obj['webAppUrl'] = ApiClient.convertToType(data['webAppUrl'], 'String');
            }
            if (data.hasOwnProperty('services')) {
                obj['services'] = PlatformServices.constructFromObject(data['services']);
            }
        }
        return obj;
    }


}

/**
 * the Platform name
 * @member {String} name
 */
Platform.prototype['name'] = undefined;

/**
 * the Platform description
 * @member {String} description
 */
Platform.prototype['description'] = undefined;

/**
 * the Platform version MAJOR.MINOR.PATCH.
 * @member {String} version
 */
Platform.prototype['version'] = undefined;

/**
 * the Platform owner Id
 * @member {String} ownerId
 */
Platform.prototype['ownerId'] = undefined;

/**
 * Platform host name
 * @member {String} apiHost
 */
Platform.prototype['apiHost'] = undefined;

/**
 * the Web Application Portal to use the Platform
 * @member {String} webAppUrl
 */
Platform.prototype['webAppUrl'] = undefined;

/**
 * @member {module:model/PlatformServices} services
 */
Platform.prototype['services'] = undefined;






export default Platform;

