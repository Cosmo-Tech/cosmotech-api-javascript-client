/**
 * Cosmo Tech Plaform API
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ScenarioUser from './ScenarioUser';

/**
 * The ScenarioBase model module.
 * @module model/ScenarioBase
 * @version 0.0.1-SNAPSHOT
 */
class ScenarioBase {
    /**
     * Constructs a new <code>ScenarioBase</code>.
     * a Scenario with base information
     * @alias module:model/ScenarioBase
     * @param name {String} the Scenario name
     */
    constructor(name) { 
        
        ScenarioBase.initialize(this, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name) { 
        obj['name'] = name;
    }

    /**
     * Constructs a <code>ScenarioBase</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ScenarioBase} obj Optional instance to populate.
     * @return {module:model/ScenarioBase} The populated <code>ScenarioBase</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ScenarioBase();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('parentId')) {
                obj['parentId'] = ApiClient.convertToType(data['parentId'], 'String');
            }
            if (data.hasOwnProperty('ownerId')) {
                obj['ownerId'] = ApiClient.convertToType(data['ownerId'], 'String');
            }
            if (data.hasOwnProperty('solutionId')) {
                obj['solutionId'] = ApiClient.convertToType(data['solutionId'], 'String');
            }
            if (data.hasOwnProperty('runTemplateId')) {
                obj['runTemplateId'] = ApiClient.convertToType(data['runTemplateId'], 'String');
            }
            if (data.hasOwnProperty('users')) {
                obj['users'] = ApiClient.convertToType(data['users'], [ScenarioUser]);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('creationDate')) {
                obj['creationDate'] = ApiClient.convertToType(data['creationDate'], 'String');
            }
        }
        return obj;
    }


}

/**
 * the Scenario unique identifier
 * @member {String} id
 */
ScenarioBase.prototype['id'] = undefined;

/**
 * the Scenario name
 * @member {String} name
 */
ScenarioBase.prototype['name'] = undefined;

/**
 * the Scenario description
 * @member {String} description
 */
ScenarioBase.prototype['description'] = undefined;

/**
 * the list of tags
 * @member {Array.<String>} tags
 */
ScenarioBase.prototype['tags'] = undefined;

/**
 * the Scenario parent id
 * @member {String} parentId
 */
ScenarioBase.prototype['parentId'] = undefined;

/**
 * the user id which own this Scenario
 * @member {String} ownerId
 */
ScenarioBase.prototype['ownerId'] = undefined;

/**
 * the Solution Id associated with this Scenario
 * @member {String} solutionId
 */
ScenarioBase.prototype['solutionId'] = undefined;

/**
 * the Solution Run Template Id associated with this Scenario
 * @member {String} runTemplateId
 */
ScenarioBase.prototype['runTemplateId'] = undefined;

/**
 * the list of users Id with their role
 * @member {Array.<module:model/ScenarioUser>} users
 */
ScenarioBase.prototype['users'] = undefined;

/**
 * the Scenario state
 * @member {module:model/ScenarioBase.StateEnum} state
 */
ScenarioBase.prototype['state'] = undefined;

/**
 * the Scenario creation date
 * @member {String} creationDate
 */
ScenarioBase.prototype['creationDate'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
ScenarioBase['StateEnum'] = {

    /**
     * value: "Created"
     * @const
     */
    "Created": "Created",

    /**
     * value: "Running"
     * @const
     */
    "Running": "Running",

    /**
     * value: "Successful"
     * @const
     */
    "Successful": "Successful",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed"
};



export default ScenarioBase;

