/**
 * Cosmo Tech Platform API
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 3.2.0
 * Contact: platform@cosmotech.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ValidatorRun model module.
 * @module model/ValidatorRun
 * @version 3.2.0
 */
class ValidatorRun {
    /**
     * Constructs a new <code>ValidatorRun</code>.
     * a Validator Run
     * @alias module:model/ValidatorRun
     * @param datasetId {String} the Dataset id to run the validator on
     */
    constructor(datasetId) { 
        
        ValidatorRun.initialize(this, datasetId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, datasetId) { 
        obj['datasetId'] = datasetId;
    }

    /**
     * Constructs a <code>ValidatorRun</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ValidatorRun} obj Optional instance to populate.
     * @return {module:model/ValidatorRun} The populated <code>ValidatorRun</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ValidatorRun();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('validatorId')) {
                obj['validatorId'] = ApiClient.convertToType(data['validatorId'], 'String');
            }
            if (data.hasOwnProperty('validatorName')) {
                obj['validatorName'] = ApiClient.convertToType(data['validatorName'], 'String');
            }
            if (data.hasOwnProperty('datasetId')) {
                obj['datasetId'] = ApiClient.convertToType(data['datasetId'], 'String');
            }
            if (data.hasOwnProperty('datasetName')) {
                obj['datasetName'] = ApiClient.convertToType(data['datasetName'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('containerId')) {
                obj['containerId'] = ApiClient.convertToType(data['containerId'], 'String');
            }
            if (data.hasOwnProperty('logs')) {
                obj['logs'] = ApiClient.convertToType(data['logs'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ValidatorRun</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ValidatorRun</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ValidatorRun.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['validatorId'] && !(typeof data['validatorId'] === 'string' || data['validatorId'] instanceof String)) {
            throw new Error("Expected the field `validatorId` to be a primitive type in the JSON string but got " + data['validatorId']);
        }
        // ensure the json data is a string
        if (data['validatorName'] && !(typeof data['validatorName'] === 'string' || data['validatorName'] instanceof String)) {
            throw new Error("Expected the field `validatorName` to be a primitive type in the JSON string but got " + data['validatorName']);
        }
        // ensure the json data is a string
        if (data['datasetId'] && !(typeof data['datasetId'] === 'string' || data['datasetId'] instanceof String)) {
            throw new Error("Expected the field `datasetId` to be a primitive type in the JSON string but got " + data['datasetId']);
        }
        // ensure the json data is a string
        if (data['datasetName'] && !(typeof data['datasetName'] === 'string' || data['datasetName'] instanceof String)) {
            throw new Error("Expected the field `datasetName` to be a primitive type in the JSON string but got " + data['datasetName']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['containerId'] && !(typeof data['containerId'] === 'string' || data['containerId'] instanceof String)) {
            throw new Error("Expected the field `containerId` to be a primitive type in the JSON string but got " + data['containerId']);
        }
        // ensure the json data is a string
        if (data['logs'] && !(typeof data['logs'] === 'string' || data['logs'] instanceof String)) {
            throw new Error("Expected the field `logs` to be a primitive type in the JSON string but got " + data['logs']);
        }

        return true;
    }


}

ValidatorRun.RequiredProperties = ["datasetId"];

/**
 * the Validator Run id
 * @member {String} id
 */
ValidatorRun.prototype['id'] = undefined;

/**
 * the Validator id
 * @member {String} validatorId
 */
ValidatorRun.prototype['validatorId'] = undefined;

/**
 * the validator name
 * @member {String} validatorName
 */
ValidatorRun.prototype['validatorName'] = undefined;

/**
 * the Dataset id to run the validator on
 * @member {String} datasetId
 */
ValidatorRun.prototype['datasetId'] = undefined;

/**
 * the Dataset name
 * @member {String} datasetName
 */
ValidatorRun.prototype['datasetName'] = undefined;

/**
 * the Validator Run state
 * @member {module:model/ValidatorRun.StateEnum} state
 */
ValidatorRun.prototype['state'] = undefined;

/**
 * the Validator Run container id
 * @member {String} containerId
 */
ValidatorRun.prototype['containerId'] = undefined;

/**
 * the Validator Run logs
 * @member {String} logs
 */
ValidatorRun.prototype['logs'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
ValidatorRun['StateEnum'] = {

    /**
     * value: "Running"
     * @const
     */
    "Running": "Running",

    /**
     * value: "Finished"
     * @const
     */
    "Finished": "Finished",

    /**
     * value: "OnError"
     * @const
     */
    "OnError": "OnError"
};



export default ValidatorRun;

