/**
 * Cosmo Tech Plaform API
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ScenarioAnalysis from './ScenarioAnalysis';
import ScenarioAnalysisParameterValue from './ScenarioAnalysisParameterValue';
import ScenarioRunAnalysisAllOf from './ScenarioRunAnalysisAllOf';

/**
 * The ScenarioRunAnalysis model module.
 * @module model/ScenarioRunAnalysis
 * @version 0.0.1-SNAPSHOT
 */
class ScenarioRunAnalysis {
    /**
     * Constructs a new <code>ScenarioRunAnalysis</code>.
     * @alias module:model/ScenarioRunAnalysis
     * @implements module:model/ScenarioAnalysis
     * @implements module:model/ScenarioRunAnalysisAllOf
     * @param analysisId {String} the Simulator Analysis Id
     */
    constructor(analysisId) { 
        ScenarioAnalysis.initialize(this, analysisId);ScenarioRunAnalysisAllOf.initialize(this);
        ScenarioRunAnalysis.initialize(this, analysisId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, analysisId) { 
        obj['analysisId'] = analysisId;
    }

    /**
     * Constructs a <code>ScenarioRunAnalysis</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ScenarioRunAnalysis} obj Optional instance to populate.
     * @return {module:model/ScenarioRunAnalysis} The populated <code>ScenarioRunAnalysis</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ScenarioRunAnalysis();
            ScenarioAnalysis.constructFromObject(data, obj);
            ScenarioRunAnalysisAllOf.constructFromObject(data, obj);

            if (data.hasOwnProperty('analysisId')) {
                obj['analysisId'] = ApiClient.convertToType(data['analysisId'], 'String');
            }
            if (data.hasOwnProperty('datasetList')) {
                obj['datasetList'] = ApiClient.convertToType(data['datasetList'], ['String']);
            }
            if (data.hasOwnProperty('parametersValues')) {
                obj['parametersValues'] = ApiClient.convertToType(data['parametersValues'], [ScenarioAnalysisParameterValue]);
            }
            if (data.hasOwnProperty('simulationId')) {
                obj['simulationId'] = ApiClient.convertToType(data['simulationId'], 'String');
            }
            if (data.hasOwnProperty('simulationState')) {
                obj['simulationState'] = ApiClient.convertToType(data['simulationState'], 'String');
            }
        }
        return obj;
    }


}

/**
 * the Simulator Analysis Id
 * @member {String} analysisId
 */
ScenarioRunAnalysis.prototype['analysisId'] = undefined;

/**
 * the list of Dataset Id associated to this Scenario Analysis
 * @member {Array.<String>} datasetList
 */
ScenarioRunAnalysis.prototype['datasetList'] = undefined;

/**
 * the list of Simulator Analysis parameters values
 * @member {Array.<module:model/ScenarioAnalysisParameterValue>} parametersValues
 */
ScenarioRunAnalysis.prototype['parametersValues'] = undefined;

/**
 * the Simulation Run Id
 * @member {String} simulationId
 */
ScenarioRunAnalysis.prototype['simulationId'] = undefined;

/**
 * the Simulation Run State
 * @member {String} simulationState
 */
ScenarioRunAnalysis.prototype['simulationState'] = undefined;


// Implement ScenarioAnalysis interface:
/**
 * the Simulator Analysis Id
 * @member {String} analysisId
 */
ScenarioAnalysis.prototype['analysisId'] = undefined;
/**
 * the list of Dataset Id associated to this Scenario Analysis
 * @member {Array.<String>} datasetList
 */
ScenarioAnalysis.prototype['datasetList'] = undefined;
/**
 * the list of Simulator Analysis parameters values
 * @member {Array.<module:model/ScenarioAnalysisParameterValue>} parametersValues
 */
ScenarioAnalysis.prototype['parametersValues'] = undefined;
// Implement ScenarioRunAnalysisAllOf interface:
/**
 * the Simulation Run Id
 * @member {String} simulationId
 */
ScenarioRunAnalysisAllOf.prototype['simulationId'] = undefined;
/**
 * the Simulation Run State
 * @member {String} simulationState
 */
ScenarioRunAnalysisAllOf.prototype['simulationState'] = undefined;




export default ScenarioRunAnalysis;

