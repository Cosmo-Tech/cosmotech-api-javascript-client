/**
 * Cosmo Tech Plaform API
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ScenarioAllOf from './ScenarioAllOf';
import ScenarioAnalysis from './ScenarioAnalysis';
import ScenarioBase from './ScenarioBase';
import ScenarioFailedAnalysis from './ScenarioFailedAnalysis';
import ScenarioRunningAnalysis from './ScenarioRunningAnalysis';
import ScenarioSuccessfulAnalysis from './ScenarioSuccessfulAnalysis';
import ScenarioUser from './ScenarioUser';

/**
 * The Scenario model module.
 * @module model/Scenario
 * @version 0.0.1-SNAPSHOT
 */
class Scenario {
    /**
     * Constructs a new <code>Scenario</code>.
     * @alias module:model/Scenario
     * @implements module:model/ScenarioBase
     * @implements module:model/ScenarioAllOf
     * @param name {String} the Scenario name
     */
    constructor(name) { 
        ScenarioBase.initialize(this, name);ScenarioAllOf.initialize(this);
        Scenario.initialize(this, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name) { 
        obj['name'] = name;
    }

    /**
     * Constructs a <code>Scenario</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Scenario} obj Optional instance to populate.
     * @return {module:model/Scenario} The populated <code>Scenario</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Scenario();
            ScenarioBase.constructFromObject(data, obj);
            ScenarioAllOf.constructFromObject(data, obj);

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('parentId')) {
                obj['parentId'] = ApiClient.convertToType(data['parentId'], 'String');
            }
            if (data.hasOwnProperty('ownerId')) {
                obj['ownerId'] = ApiClient.convertToType(data['ownerId'], 'String');
            }
            if (data.hasOwnProperty('simulatorId')) {
                obj['simulatorId'] = ApiClient.convertToType(data['simulatorId'], 'String');
            }
            if (data.hasOwnProperty('userList')) {
                obj['userList'] = ApiClient.convertToType(data['userList'], [ScenarioUser]);
            }
            if (data.hasOwnProperty('simulatorName')) {
                obj['simulatorName'] = ApiClient.convertToType(data['simulatorName'], 'String');
            }
            if (data.hasOwnProperty('simulatorAnalysisName')) {
                obj['simulatorAnalysisName'] = ApiClient.convertToType(data['simulatorAnalysisName'], 'String');
            }
            if (data.hasOwnProperty('analysis')) {
                obj['analysis'] = ScenarioAnalysis.constructFromObject(data['analysis']);
            }
            if (data.hasOwnProperty('successfulAnalysis')) {
                obj['successfulAnalysis'] = ScenarioSuccessfulAnalysis.constructFromObject(data['successfulAnalysis']);
            }
            if (data.hasOwnProperty('failedAnalysis')) {
                obj['failedAnalysis'] = ScenarioFailedAnalysis.constructFromObject(data['failedAnalysis']);
            }
            if (data.hasOwnProperty('runningAnalysis')) {
                obj['runningAnalysis'] = ScenarioRunningAnalysis.constructFromObject(data['runningAnalysis']);
            }
            if (data.hasOwnProperty('sendInputToDataWarehouse')) {
                obj['sendInputToDataWarehouse'] = ApiClient.convertToType(data['sendInputToDataWarehouse'], 'Boolean');
            }
        }
        return obj;
    }


}

/**
 * the Scenario unique identifier
 * @member {String} id
 */
Scenario.prototype['id'] = undefined;

/**
 * the Scenario name
 * @member {String} name
 */
Scenario.prototype['name'] = undefined;

/**
 * the Scenario description
 * @member {String} description
 */
Scenario.prototype['description'] = undefined;

/**
 * the list of tags
 * @member {Array.<String>} tags
 */
Scenario.prototype['tags'] = undefined;

/**
 * the Scenario parent id
 * @member {String} parentId
 */
Scenario.prototype['parentId'] = undefined;

/**
 * the user id which own this Scenario
 * @member {String} ownerId
 */
Scenario.prototype['ownerId'] = undefined;

/**
 * the Simulator Id associated with this Scenario
 * @member {String} simulatorId
 */
Scenario.prototype['simulatorId'] = undefined;

/**
 * the list of users Id with their role
 * @member {Array.<module:model/ScenarioUser>} userList
 */
Scenario.prototype['userList'] = undefined;

/**
 * @member {String} simulatorName
 */
Scenario.prototype['simulatorName'] = undefined;

/**
 * @member {String} simulatorAnalysisName
 */
Scenario.prototype['simulatorAnalysisName'] = undefined;

/**
 * @member {module:model/ScenarioAnalysis} analysis
 */
Scenario.prototype['analysis'] = undefined;

/**
 * @member {module:model/ScenarioSuccessfulAnalysis} successfulAnalysis
 */
Scenario.prototype['successfulAnalysis'] = undefined;

/**
 * @member {module:model/ScenarioFailedAnalysis} failedAnalysis
 */
Scenario.prototype['failedAnalysis'] = undefined;

/**
 * @member {module:model/ScenarioRunningAnalysis} runningAnalysis
 */
Scenario.prototype['runningAnalysis'] = undefined;

/**
 * default setting for all Analysis to set whether or not the Dataset values and the input parameters values are send to the DataWarehouse prior to Simulation Run
 * @member {Boolean} sendInputToDataWarehouse
 */
Scenario.prototype['sendInputToDataWarehouse'] = undefined;


// Implement ScenarioBase interface:
/**
 * the Scenario unique identifier
 * @member {String} id
 */
ScenarioBase.prototype['id'] = undefined;
/**
 * the Scenario name
 * @member {String} name
 */
ScenarioBase.prototype['name'] = undefined;
/**
 * the Scenario description
 * @member {String} description
 */
ScenarioBase.prototype['description'] = undefined;
/**
 * the list of tags
 * @member {Array.<String>} tags
 */
ScenarioBase.prototype['tags'] = undefined;
/**
 * the Scenario parent id
 * @member {String} parentId
 */
ScenarioBase.prototype['parentId'] = undefined;
/**
 * the user id which own this Scenario
 * @member {String} ownerId
 */
ScenarioBase.prototype['ownerId'] = undefined;
/**
 * the Simulator Id associated with this Scenario
 * @member {String} simulatorId
 */
ScenarioBase.prototype['simulatorId'] = undefined;
/**
 * the list of users Id with their role
 * @member {Array.<module:model/ScenarioUser>} userList
 */
ScenarioBase.prototype['userList'] = undefined;
// Implement ScenarioAllOf interface:
/**
 * @member {String} simulatorName
 */
ScenarioAllOf.prototype['simulatorName'] = undefined;
/**
 * @member {String} simulatorAnalysisName
 */
ScenarioAllOf.prototype['simulatorAnalysisName'] = undefined;
/**
 * @member {module:model/ScenarioAnalysis} analysis
 */
ScenarioAllOf.prototype['analysis'] = undefined;
/**
 * @member {module:model/ScenarioSuccessfulAnalysis} successfulAnalysis
 */
ScenarioAllOf.prototype['successfulAnalysis'] = undefined;
/**
 * @member {module:model/ScenarioFailedAnalysis} failedAnalysis
 */
ScenarioAllOf.prototype['failedAnalysis'] = undefined;
/**
 * @member {module:model/ScenarioRunningAnalysis} runningAnalysis
 */
ScenarioAllOf.prototype['runningAnalysis'] = undefined;
/**
 * default setting for all Analysis to set whether or not the Dataset values and the input parameters values are send to the DataWarehouse prior to Simulation Run
 * @member {Boolean} sendInputToDataWarehouse
 */
ScenarioAllOf.prototype['sendInputToDataWarehouse'] = undefined;




export default Scenario;

