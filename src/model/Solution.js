/**
 * Cosmo Tech Platform API
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 4.0.3-SNAPSHOT
 * Contact: platform@cosmotech.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RunTemplate from './RunTemplate';
import RunTemplateParameter from './RunTemplateParameter';
import RunTemplateParameterGroup from './RunTemplateParameterGroup';
import SolutionSecurity from './SolutionSecurity';

/**
 * The Solution model module.
 * @module model/Solution
 * @version 4.0.3-SNAPSHOT
 */
class Solution {
    /**
     * Constructs a new <code>Solution</code>.
     * a version of a Solution
     * @alias module:model/Solution
     */
    constructor() { 
        
        Solution.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Solution</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Solution} obj Optional instance to populate.
     * @return {module:model/Solution} The populated <code>Solution</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Solution();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('organizationId')) {
                obj['organizationId'] = ApiClient.convertToType(data['organizationId'], 'String');
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('repository')) {
                obj['repository'] = ApiClient.convertToType(data['repository'], 'String');
            }
            if (data.hasOwnProperty('alwaysPull')) {
                obj['alwaysPull'] = ApiClient.convertToType(data['alwaysPull'], 'Boolean');
            }
            if (data.hasOwnProperty('csmSimulator')) {
                obj['csmSimulator'] = ApiClient.convertToType(data['csmSimulator'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
            if (data.hasOwnProperty('ownerId')) {
                obj['ownerId'] = ApiClient.convertToType(data['ownerId'], 'String');
            }
            if (data.hasOwnProperty('sdkVersion')) {
                obj['sdkVersion'] = ApiClient.convertToType(data['sdkVersion'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = ApiClient.convertToType(data['parameters'], [RunTemplateParameter]);
            }
            if (data.hasOwnProperty('parameterGroups')) {
                obj['parameterGroups'] = ApiClient.convertToType(data['parameterGroups'], [RunTemplateParameterGroup]);
            }
            if (data.hasOwnProperty('runTemplates')) {
                obj['runTemplates'] = ApiClient.convertToType(data['runTemplates'], [RunTemplate]);
            }
            if (data.hasOwnProperty('security')) {
                obj['security'] = ApiClient.convertToType(data['security'], SolutionSecurity);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Solution</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Solution</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['organizationId'] && !(typeof data['organizationId'] === 'string' || data['organizationId'] instanceof String)) {
            throw new Error("Expected the field `organizationId` to be a primitive type in the JSON string but got " + data['organizationId']);
        }
        // ensure the json data is a string
        if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
            throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['repository'] && !(typeof data['repository'] === 'string' || data['repository'] instanceof String)) {
            throw new Error("Expected the field `repository` to be a primitive type in the JSON string but got " + data['repository']);
        }
        // ensure the json data is a string
        if (data['csmSimulator'] && !(typeof data['csmSimulator'] === 'string' || data['csmSimulator'] instanceof String)) {
            throw new Error("Expected the field `csmSimulator` to be a primitive type in the JSON string but got " + data['csmSimulator']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }
        // ensure the json data is a string
        if (data['ownerId'] && !(typeof data['ownerId'] === 'string' || data['ownerId'] instanceof String)) {
            throw new Error("Expected the field `ownerId` to be a primitive type in the JSON string but got " + data['ownerId']);
        }
        // ensure the json data is a string
        if (data['sdkVersion'] && !(typeof data['sdkVersion'] === 'string' || data['sdkVersion'] instanceof String)) {
            throw new Error("Expected the field `sdkVersion` to be a primitive type in the JSON string but got " + data['sdkVersion']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }
        if (data['parameters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['parameters'])) {
                throw new Error("Expected the field `parameters` to be an array in the JSON data but got " + data['parameters']);
            }
            // validate the optional field `parameters` (array)
            for (const item of data['parameters']) {
                RunTemplateParameter.validateJSON(item);
            };
        }
        if (data['parameterGroups']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['parameterGroups'])) {
                throw new Error("Expected the field `parameterGroups` to be an array in the JSON data but got " + data['parameterGroups']);
            }
            // validate the optional field `parameterGroups` (array)
            for (const item of data['parameterGroups']) {
                RunTemplateParameterGroup.validateJSON(item);
            };
        }
        if (data['runTemplates']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['runTemplates'])) {
                throw new Error("Expected the field `runTemplates` to be an array in the JSON data but got " + data['runTemplates']);
            }
            // validate the optional field `runTemplates` (array)
            for (const item of data['runTemplates']) {
                RunTemplate.validateJSON(item);
            };
        }
        // validate the optional field `security`
        if (data['security']) { // data not null
          SolutionSecurity.validateJSON(data['security']);
        }

        return true;
    }


}



/**
 * the Solution version unique identifier
 * @member {String} id
 */
Solution.prototype['id'] = undefined;

/**
 * the Organization unique identifier
 * @member {String} organizationId
 */
Solution.prototype['organizationId'] = undefined;

/**
 * the Solution key which group Solution versions
 * @member {String} key
 */
Solution.prototype['key'] = undefined;

/**
 * the Solution name
 * @member {String} name
 */
Solution.prototype['name'] = undefined;

/**
 * the Solution description
 * @member {String} description
 */
Solution.prototype['description'] = undefined;

/**
 * the registry repository containing the image
 * @member {String} repository
 */
Solution.prototype['repository'] = undefined;

/**
 * set to true if the runtemplate wants to always pull the image
 * @member {Boolean} alwaysPull
 * @default false
 */
Solution.prototype['alwaysPull'] = false;

/**
 * the main Cosmo Tech simulator name used in standard Run Template
 * @member {String} csmSimulator
 */
Solution.prototype['csmSimulator'] = undefined;

/**
 * the Solution version MAJOR.MINOR.PATCH. Must be aligned with an existing repository tag
 * @member {String} version
 */
Solution.prototype['version'] = undefined;

/**
 * the User id which own this Solution
 * @member {String} ownerId
 */
Solution.prototype['ownerId'] = undefined;

/**
 * the MAJOR.MINOR version used to build this solution
 * @member {String} sdkVersion
 */
Solution.prototype['sdkVersion'] = undefined;

/**
 * an optional URL link to solution page
 * @member {String} url
 */
Solution.prototype['url'] = undefined;

/**
 * the list of tags
 * @member {Array.<String>} tags
 */
Solution.prototype['tags'] = undefined;

/**
 * the list of Run Template Parameters
 * @member {Array.<module:model/RunTemplateParameter>} parameters
 */
Solution.prototype['parameters'] = undefined;

/**
 * the list of parameters groups for the Run Templates
 * @member {Array.<module:model/RunTemplateParameterGroup>} parameterGroups
 */
Solution.prototype['parameterGroups'] = undefined;

/**
 * list of Run Template
 * @member {Array.<module:model/RunTemplate>} runTemplates
 */
Solution.prototype['runTemplates'] = undefined;

/**
 * @member {module:model/SolutionSecurity} security
 */
Solution.prototype['security'] = undefined;






export default Solution;

