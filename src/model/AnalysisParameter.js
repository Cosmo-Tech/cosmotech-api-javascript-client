/**
 * Cosmo Tech Plaform API
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AnalysisParameter model module.
 * @module model/AnalysisParameter
 * @version 0.0.1-SNAPSHOT
 */
class AnalysisParameter {
    /**
     * Constructs a new <code>AnalysisParameter</code>.
     * a Simulator Analysis Parameter
     * @alias module:model/AnalysisParameter
     * @param id {String} the Parameter id
     * @param labels {Object.<String, Object>} a translated label with key as ISO 639-1 code
     * @param varType {String} the variable type for the parameter. Basic types or special type $DATASETID, $DATAPATH
     */
    constructor(id, labels, varType) { 
        
        AnalysisParameter.initialize(this, id, labels, varType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, labels, varType) { 
        obj['id'] = id;
        obj['labels'] = labels;
        obj['varType'] = varType;
    }

    /**
     * Constructs a <code>AnalysisParameter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AnalysisParameter} obj Optional instance to populate.
     * @return {module:model/AnalysisParameter} The populated <code>AnalysisParameter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AnalysisParameter();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': Object});
            }
            if (data.hasOwnProperty('varType')) {
                obj['varType'] = ApiClient.convertToType(data['varType'], 'String');
            }
            if (data.hasOwnProperty('order')) {
                obj['order'] = ApiClient.convertToType(data['order'], 'Number');
            }
            if (data.hasOwnProperty('options')) {
                obj['options'] = ApiClient.convertToType(data['options'], {'String': Object});
            }
        }
        return obj;
    }


}

/**
 * the Parameter id
 * @member {String} id
 */
AnalysisParameter.prototype['id'] = undefined;

/**
 * a translated label with key as ISO 639-1 code
 * @member {Object.<String, Object>} labels
 */
AnalysisParameter.prototype['labels'] = undefined;

/**
 * the variable type for the parameter. Basic types or special type $DATASETID, $DATAPATH
 * @member {String} varType
 */
AnalysisParameter.prototype['varType'] = undefined;

/**
 * the Parameter Group order
 * @member {Number} order
 */
AnalysisParameter.prototype['order'] = undefined;

/**
 * freeform options
 * @member {Object.<String, Object>} options
 */
AnalysisParameter.prototype['options'] = undefined;






export default AnalysisParameter;

