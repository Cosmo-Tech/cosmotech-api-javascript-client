/**
 * Cosmo Tech Plaform API
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SimulationBase model module.
 * @module model/SimulationBase
 * @version 0.0.1-SNAPSHOT
 */
class SimulationBase {
    /**
     * Constructs a new <code>SimulationBase</code>.
     * a Simulation with only base properties
     * @alias module:model/SimulationBase
     */
    constructor() { 
        
        SimulationBase.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SimulationBase</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SimulationBase} obj Optional instance to populate.
     * @return {module:model/SimulationBase} The populated <code>SimulationBase</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SimulationBase();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('jobId')) {
                obj['jobId'] = ApiClient.convertToType(data['jobId'], 'String');
            }
            if (data.hasOwnProperty('ownerId')) {
                obj['ownerId'] = ApiClient.convertToType(data['ownerId'], 'String');
            }
            if (data.hasOwnProperty('workspaceId')) {
                obj['workspaceId'] = ApiClient.convertToType(data['workspaceId'], 'String');
            }
            if (data.hasOwnProperty('workspaceName')) {
                obj['workspaceName'] = ApiClient.convertToType(data['workspaceName'], 'String');
            }
            if (data.hasOwnProperty('scenarioId')) {
                obj['scenarioId'] = ApiClient.convertToType(data['scenarioId'], 'String');
            }
            if (data.hasOwnProperty('scenarioName')) {
                obj['scenarioName'] = ApiClient.convertToType(data['scenarioName'], 'String');
            }
            if (data.hasOwnProperty('solutionId')) {
                obj['solutionId'] = ApiClient.convertToType(data['solutionId'], 'String');
            }
            if (data.hasOwnProperty('solutionName')) {
                obj['solutionName'] = ApiClient.convertToType(data['solutionName'], 'String');
            }
            if (data.hasOwnProperty('solutionVersion')) {
                obj['solutionVersion'] = ApiClient.convertToType(data['solutionVersion'], 'String');
            }
            if (data.hasOwnProperty('runTemplateId')) {
                obj['runTemplateId'] = ApiClient.convertToType(data['runTemplateId'], 'String');
            }
            if (data.hasOwnProperty('runTemplateName')) {
                obj['runTemplateName'] = ApiClient.convertToType(data['runTemplateName'], 'String');
            }
            if (data.hasOwnProperty('computeSize')) {
                obj['computeSize'] = ApiClient.convertToType(data['computeSize'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'String');
            }
            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'String');
            }
        }
        return obj;
    }


}

/**
 * the Simulation
 * @member {String} id
 */
SimulationBase.prototype['id'] = undefined;

/**
 * the Platform compute cluster Job Id
 * @member {String} jobId
 */
SimulationBase.prototype['jobId'] = undefined;

/**
 * the user id which own this simulation
 * @member {String} ownerId
 */
SimulationBase.prototype['ownerId'] = undefined;

/**
 * the Workspace Id
 * @member {String} workspaceId
 */
SimulationBase.prototype['workspaceId'] = undefined;

/**
 * the Workspace name
 * @member {String} workspaceName
 */
SimulationBase.prototype['workspaceName'] = undefined;

/**
 * the Scenario Id
 * @member {String} scenarioId
 */
SimulationBase.prototype['scenarioId'] = undefined;

/**
 * the Scenario name
 * @member {String} scenarioName
 */
SimulationBase.prototype['scenarioName'] = undefined;

/**
 * the Solution Id
 * @member {String} solutionId
 */
SimulationBase.prototype['solutionId'] = undefined;

/**
 * the Solution name
 * @member {String} solutionName
 */
SimulationBase.prototype['solutionName'] = undefined;

/**
 * the Solution version
 * @member {String} solutionVersion
 */
SimulationBase.prototype['solutionVersion'] = undefined;

/**
 * the Solution Run Template id
 * @member {String} runTemplateId
 */
SimulationBase.prototype['runTemplateId'] = undefined;

/**
 * the Run Template name
 * @member {String} runTemplateName
 */
SimulationBase.prototype['runTemplateName'] = undefined;

/**
 * the compute size needed for this Analysis. Standard sizes are basic and highcpu. Default is basic
 * @member {String} computeSize
 */
SimulationBase.prototype['computeSize'] = undefined;

/**
 * the Simulation state
 * @member {String} state
 */
SimulationBase.prototype['state'] = undefined;

/**
 * the Simulation start Date Time
 * @member {String} startTime
 */
SimulationBase.prototype['startTime'] = undefined;

/**
 * the Simulation end Date Time
 * @member {String} endTime
 */
SimulationBase.prototype['endTime'] = undefined;






export default SimulationBase;

