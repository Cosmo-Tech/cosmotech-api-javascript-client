/**
 * Cosmo Tech Plaform API
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SimulatorAnalysis from './SimulatorAnalysis';

/**
 * The Simulator model module.
 * @module model/Simulator
 * @version 0.0.1-SNAPSHOT
 */
class Simulator {
    /**
     * Constructs a new <code>Simulator</code>.
     * a version of a Simulator
     * @alias module:model/Simulator
     * @param simulatorKey {String} the Simulator key which group Simulator versions
     * @param name {String} the Simulator name
     * @param repository {String} the registry repository containing the image
     * @param version {String} the Simulator version MAJOR.MINOR.PATCH. Must be aligned with an existing repository tag
     */
    constructor(simulatorKey, name, repository, version) { 
        
        Simulator.initialize(this, simulatorKey, name, repository, version);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, simulatorKey, name, repository, version) { 
        obj['simulatorKey'] = simulatorKey;
        obj['name'] = name;
        obj['repository'] = repository;
        obj['version'] = version;
    }

    /**
     * Constructs a <code>Simulator</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Simulator} obj Optional instance to populate.
     * @return {module:model/Simulator} The populated <code>Simulator</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Simulator();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('simulatorKey')) {
                obj['simulatorKey'] = ApiClient.convertToType(data['simulatorKey'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('repository')) {
                obj['repository'] = ApiClient.convertToType(data['repository'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
            if (data.hasOwnProperty('ownerId')) {
                obj['ownerId'] = ApiClient.convertToType(data['ownerId'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('analysis')) {
                obj['analysis'] = ApiClient.convertToType(data['analysis'], [SimulatorAnalysis]);
            }
        }
        return obj;
    }


}

/**
 * the Simulator version unique identifier
 * @member {String} id
 */
Simulator.prototype['id'] = undefined;

/**
 * the Simulator key which group Simulator versions
 * @member {String} simulatorKey
 */
Simulator.prototype['simulatorKey'] = undefined;

/**
 * the Simulator name
 * @member {String} name
 */
Simulator.prototype['name'] = undefined;

/**
 * the Simulator description
 * @member {String} description
 */
Simulator.prototype['description'] = undefined;

/**
 * the registry repository containing the image
 * @member {String} repository
 */
Simulator.prototype['repository'] = undefined;

/**
 * the Simulator version MAJOR.MINOR.PATCH. Must be aligned with an existing repository tag
 * @member {String} version
 */
Simulator.prototype['version'] = undefined;

/**
 * the User id which own this Simulator
 * @member {String} ownerId
 */
Simulator.prototype['ownerId'] = undefined;

/**
 * an optional URL link to simulator page
 * @member {String} url
 */
Simulator.prototype['url'] = undefined;

/**
 * the list of tags
 * @member {Array.<String>} tags
 */
Simulator.prototype['tags'] = undefined;

/**
 * list of Simulator Analysis
 * @member {Array.<module:model/SimulatorAnalysis>} analysis
 */
Simulator.prototype['analysis'] = undefined;






export default Simulator;

