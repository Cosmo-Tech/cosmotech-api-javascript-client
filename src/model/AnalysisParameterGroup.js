/**
 * Cosmo Tech Plaform API
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AnalysisParameter from './AnalysisParameter';

/**
 * The AnalysisParameterGroup model module.
 * @module model/AnalysisParameterGroup
 * @version 0.0.1-SNAPSHOT
 */
class AnalysisParameterGroup {
    /**
     * Constructs a new <code>AnalysisParameterGroup</code>.
     * a Parameter Group for an Analysis
     * @alias module:model/AnalysisParameterGroup
     * @param id {String} the Parameter Group id
     * @param labels {Object.<String, Object>} a translated label with key as ISO 639-1 code
     * @param parameters {Array.<module:model/AnalysisParameter>} a list of Simulator Analysis Parameters
     */
    constructor(id, labels, parameters) { 
        
        AnalysisParameterGroup.initialize(this, id, labels, parameters);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, labels, parameters) { 
        obj['id'] = id;
        obj['labels'] = labels;
        obj['parameters'] = parameters;
    }

    /**
     * Constructs a <code>AnalysisParameterGroup</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AnalysisParameterGroup} obj Optional instance to populate.
     * @return {module:model/AnalysisParameterGroup} The populated <code>AnalysisParameterGroup</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AnalysisParameterGroup();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': Object});
            }
            if (data.hasOwnProperty('order')) {
                obj['order'] = ApiClient.convertToType(data['order'], 'Number');
            }
            if (data.hasOwnProperty('isTable')) {
                obj['isTable'] = ApiClient.convertToType(data['isTable'], 'Boolean');
            }
            if (data.hasOwnProperty('options')) {
                obj['options'] = ApiClient.convertToType(data['options'], {'String': Object});
            }
            if (data.hasOwnProperty('parentId')) {
                obj['parentId'] = ApiClient.convertToType(data['parentId'], 'String');
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = ApiClient.convertToType(data['parameters'], [AnalysisParameter]);
            }
        }
        return obj;
    }


}

/**
 * the Parameter Group id
 * @member {String} id
 */
AnalysisParameterGroup.prototype['id'] = undefined;

/**
 * a translated label with key as ISO 639-1 code
 * @member {Object.<String, Object>} labels
 */
AnalysisParameterGroup.prototype['labels'] = undefined;

/**
 * the Parameter Group order
 * @member {Number} order
 */
AnalysisParameterGroup.prototype['order'] = undefined;

/**
 * does the group define a table
 * @member {Boolean} isTable
 */
AnalysisParameterGroup.prototype['isTable'] = undefined;

/**
 * freeform options
 * @member {Object.<String, Object>} options
 */
AnalysisParameterGroup.prototype['options'] = undefined;

/**
 * the Simulator Analysis Group parent Id
 * @member {String} parentId
 */
AnalysisParameterGroup.prototype['parentId'] = undefined;

/**
 * a list of Simulator Analysis Parameters
 * @member {Array.<module:model/AnalysisParameter>} parameters
 */
AnalysisParameterGroup.prototype['parameters'] = undefined;






export default AnalysisParameterGroup;

