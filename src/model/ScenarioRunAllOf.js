/**
 * Cosmo Tech Plaform API
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RunTemplateParameterValue from './RunTemplateParameterValue';
import ScenarioRunContainers from './ScenarioRunContainers';

/**
 * The ScenarioRunAllOf model module.
 * @module model/ScenarioRunAllOf
 * @version 0.0.1-SNAPSHOT
 */
class ScenarioRunAllOf {
    /**
     * Constructs a new <code>ScenarioRunAllOf</code>.
     * a ScenarioRun
     * @alias module:model/ScenarioRunAllOf
     */
    constructor() { 
        
        ScenarioRunAllOf.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ScenarioRunAllOf</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ScenarioRunAllOf} obj Optional instance to populate.
     * @return {module:model/ScenarioRunAllOf} The populated <code>ScenarioRunAllOf</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ScenarioRunAllOf();

            if (data.hasOwnProperty('datasetList')) {
                obj['datasetList'] = ApiClient.convertToType(data['datasetList'], ['String']);
            }
            if (data.hasOwnProperty('parametersValues')) {
                obj['parametersValues'] = ApiClient.convertToType(data['parametersValues'], [RunTemplateParameterValue]);
            }
            if (data.hasOwnProperty('sendInputToDataWarehouse')) {
                obj['sendInputToDataWarehouse'] = ApiClient.convertToType(data['sendInputToDataWarehouse'], 'Boolean');
            }
            if (data.hasOwnProperty('dataWarehouseDB')) {
                obj['dataWarehouseDB'] = ApiClient.convertToType(data['dataWarehouseDB'], 'String');
            }
            if (data.hasOwnProperty('resultsEventBusResourceUri')) {
                obj['resultsEventBusResourceUri'] = ApiClient.convertToType(data['resultsEventBusResourceUri'], 'String');
            }
            if (data.hasOwnProperty('scenariorunEventBusResourceUri')) {
                obj['scenariorunEventBusResourceUri'] = ApiClient.convertToType(data['scenariorunEventBusResourceUri'], 'String');
            }
            if (data.hasOwnProperty('nodeLabel')) {
                obj['nodeLabel'] = ApiClient.convertToType(data['nodeLabel'], 'String');
            }
            if (data.hasOwnProperty('initContainers')) {
                obj['initContainers'] = ApiClient.convertToType(data['initContainers'], [ScenarioRunContainers]);
            }
            if (data.hasOwnProperty('mainContainer')) {
                obj['mainContainer'] = ScenarioRunContainers.constructFromObject(data['mainContainer']);
            }
        }
        return obj;
    }


}

/**
 * the list of Dataset Id associated to this Analysis
 * @member {Array.<String>} datasetList
 */
ScenarioRunAllOf.prototype['datasetList'] = undefined;

/**
 * the list of Run Template parameters values
 * @member {Array.<module:model/RunTemplateParameterValue>} parametersValues
 */
ScenarioRunAllOf.prototype['parametersValues'] = undefined;

/**
 * whether or not the Dataset values and the input parameters values are send to the DataWarehouse prior to ScenarioRun Run
 * @member {Boolean} sendInputToDataWarehouse
 */
ScenarioRunAllOf.prototype['sendInputToDataWarehouse'] = undefined;

/**
 * the DataWarehouse database name to send data if sendInputToDataWarehouse is set
 * @member {String} dataWarehouseDB
 */
ScenarioRunAllOf.prototype['dataWarehouseDB'] = undefined;

/**
 * the event bus which receive Workspace ScenarioRun results messages. Message won't be send if this is not set
 * @member {String} resultsEventBusResourceUri
 */
ScenarioRunAllOf.prototype['resultsEventBusResourceUri'] = undefined;

/**
 * the event bus which receive Workspace ScenarioRun events messages. Message won't be send if this is not set
 * @member {String} scenariorunEventBusResourceUri
 */
ScenarioRunAllOf.prototype['scenariorunEventBusResourceUri'] = undefined;

/**
 * the node label request
 * @member {String} nodeLabel
 */
ScenarioRunAllOf.prototype['nodeLabel'] = undefined;

/**
 * the list of init containers
 * @member {Array.<module:model/ScenarioRunContainers>} initContainers
 */
ScenarioRunAllOf.prototype['initContainers'] = undefined;

/**
 * @member {module:model/ScenarioRunContainers} mainContainer
 */
ScenarioRunAllOf.prototype['mainContainer'] = undefined;






export default ScenarioRunAllOf;

