/**
 * Cosmo Tech Plaform API
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SimulationAnalysisParameterValue from './SimulationAnalysisParameterValue';

/**
 * The SimulationStartSimulator model module.
 * @module model/SimulationStartSimulator
 * @version 0.0.1-SNAPSHOT
 */
class SimulationStartSimulator {
    /**
     * Constructs a new <code>SimulationStartSimulator</code>.
     * the parameters to run directly a Simulator
     * @alias module:model/SimulationStartSimulator
     */
    constructor() { 
        
        SimulationStartSimulator.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SimulationStartSimulator</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SimulationStartSimulator} obj Optional instance to populate.
     * @return {module:model/SimulationStartSimulator} The populated <code>SimulationStartSimulator</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SimulationStartSimulator();

            if (data.hasOwnProperty('simulatorId')) {
                obj['simulatorId'] = ApiClient.convertToType(data['simulatorId'], 'String');
            }
            if (data.hasOwnProperty('simulatorAnalysisId')) {
                obj['simulatorAnalysisId'] = ApiClient.convertToType(data['simulatorAnalysisId'], 'String');
            }
            if (data.hasOwnProperty('datasetList')) {
                obj['datasetList'] = ApiClient.convertToType(data['datasetList'], ['String']);
            }
            if (data.hasOwnProperty('parametersValues')) {
                obj['parametersValues'] = ApiClient.convertToType(data['parametersValues'], [SimulationAnalysisParameterValue]);
            }
            if (data.hasOwnProperty('sendInputToDataWarehouse')) {
                obj['sendInputToDataWarehouse'] = ApiClient.convertToType(data['sendInputToDataWarehouse'], 'Boolean');
            }
            if (data.hasOwnProperty('dataWarehouseDB')) {
                obj['dataWarehouseDB'] = ApiClient.convertToType(data['dataWarehouseDB'], 'String');
            }
            if (data.hasOwnProperty('resultsEventBusResourceUri')) {
                obj['resultsEventBusResourceUri'] = ApiClient.convertToType(data['resultsEventBusResourceUri'], 'String');
            }
            if (data.hasOwnProperty('simulationEventBusResourceUri')) {
                obj['simulationEventBusResourceUri'] = ApiClient.convertToType(data['simulationEventBusResourceUri'], 'String');
            }
        }
        return obj;
    }


}

/**
 * the Simulator Id
 * @member {String} simulatorId
 */
SimulationStartSimulator.prototype['simulatorId'] = undefined;

/**
 * the Simulator Analysis id
 * @member {String} simulatorAnalysisId
 */
SimulationStartSimulator.prototype['simulatorAnalysisId'] = undefined;

/**
 * the list of Dataset Id associated to this Analysis
 * @member {Array.<String>} datasetList
 */
SimulationStartSimulator.prototype['datasetList'] = undefined;

/**
 * the list of Simulator Analysis parameters values
 * @member {Array.<module:model/SimulationAnalysisParameterValue>} parametersValues
 */
SimulationStartSimulator.prototype['parametersValues'] = undefined;

/**
 * whether or not the Dataset values and the input parameters values are send to the DataWarehouse prior to Simulation Run
 * @member {Boolean} sendInputToDataWarehouse
 */
SimulationStartSimulator.prototype['sendInputToDataWarehouse'] = undefined;

/**
 * the DataWarehouse database name to send data if sendInputToDataWarehouse is set
 * @member {String} dataWarehouseDB
 */
SimulationStartSimulator.prototype['dataWarehouseDB'] = undefined;

/**
 * the event bus which receive Workspace Simulation results messages. Message won't be send if this is not set
 * @member {String} resultsEventBusResourceUri
 */
SimulationStartSimulator.prototype['resultsEventBusResourceUri'] = undefined;

/**
 * the event bus which receive Workspace Simulation events messages. Message won't be send if this is not set
 * @member {String} simulationEventBusResourceUri
 */
SimulationStartSimulator.prototype['simulationEventBusResourceUri'] = undefined;






export default SimulationStartSimulator;

