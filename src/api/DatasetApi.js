/**
 * Cosmo Tech Plaform API
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Dataset from '../model/Dataset';

/**
* Dataset service.
* @module api/DatasetApi
* @version 0.0.1-SNAPSHOT
*/
export default class DatasetApi {

    /**
    * Constructs a new DatasetApi. 
    * @alias module:api/DatasetApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createDataset operation.
     * @callback module:api/DatasetApi~createDatasetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Dataset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register a new dataset
     * @param {String} organizationId the Organization identifier
     * @param {module:model/Dataset} dataset the Dataset to create
     * @param {module:api/DatasetApi~createDatasetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dataset}
     */
    createDataset(organizationId, dataset, callback) {
      let postBody = dataset;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling createDataset");
      }
      // verify the required parameter 'dataset' is set
      if (dataset === undefined || dataset === null) {
        throw new Error("Missing the required parameter 'dataset' when calling createDataset");
      }

      let pathParams = {
        'organization_id': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AADOAuth2AuthCode', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Dataset;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/datasets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDataset operation.
     * @callback module:api/DatasetApi~deleteDatasetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Dataset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a dataset
     * @param {String} organizationId the Organization identifier
     * @param {String} datasetId the Dataset identifier
     * @param {module:api/DatasetApi~deleteDatasetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dataset}
     */
    deleteDataset(organizationId, datasetId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteDataset");
      }
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling deleteDataset");
      }

      let pathParams = {
        'organization_id': organizationId,
        'dataset_id': datasetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AADOAuth2AuthCode', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Dataset;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/{dataset_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findAllDatasets operation.
     * @callback module:api/DatasetApi~findAllDatasetsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Dataset>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all Datasets
     * @param {String} organizationId the Organization identifier
     * @param {module:api/DatasetApi~findAllDatasetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Dataset>}
     */
    findAllDatasets(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling findAllDatasets");
      }

      let pathParams = {
        'organization_id': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AADOAuth2AuthCode', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Dataset];
      return this.apiClient.callApi(
        '/organizations/{organization_id}/datasets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findDatasetById operation.
     * @callback module:api/DatasetApi~findDatasetByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Dataset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the details of a dataset
     * @param {String} organizationId the Organization identifier
     * @param {String} datasetId the Dataset identifier
     * @param {module:api/DatasetApi~findDatasetByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dataset}
     */
    findDatasetById(organizationId, datasetId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling findDatasetById");
      }
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling findDatasetById");
      }

      let pathParams = {
        'organization_id': organizationId,
        'dataset_id': datasetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AADOAuth2AuthCode', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Dataset;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/{dataset_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDataset operation.
     * @callback module:api/DatasetApi~updateDatasetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Dataset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a dataset
     * @param {String} organizationId the Organization identifier
     * @param {String} datasetId the Dataset identifier
     * @param {module:model/Dataset} dataset the new Dataset details.
     * @param {module:api/DatasetApi~updateDatasetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dataset}
     */
    updateDataset(organizationId, datasetId, dataset, callback) {
      let postBody = dataset;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateDataset");
      }
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling updateDataset");
      }
      // verify the required parameter 'dataset' is set
      if (dataset === undefined || dataset === null) {
        throw new Error("Missing the required parameter 'dataset' when calling updateDataset");
      }

      let pathParams = {
        'organization_id': organizationId,
        'dataset_id': datasetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AADOAuth2AuthCode', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Dataset;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/{dataset_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
