/**
 * Cosmo Tech Platform API
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 3.0.13-SNAPSHOT
 * Contact: platform@cosmotech.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Dataset from '../model/Dataset';
import DatasetAccessControl from '../model/DatasetAccessControl';
import DatasetCompatibility from '../model/DatasetCompatibility';
import DatasetCopyParameters from '../model/DatasetCopyParameters';
import DatasetRole from '../model/DatasetRole';
import DatasetSearch from '../model/DatasetSearch';
import DatasetSecurity from '../model/DatasetSecurity';
import DatasetTwinGraphHash from '../model/DatasetTwinGraphHash';
import DatasetTwinGraphInfo from '../model/DatasetTwinGraphInfo';
import DatasetTwinGraphQuery from '../model/DatasetTwinGraphQuery';
import GraphProperties from '../model/GraphProperties';
import SubDatasetGraphQuery from '../model/SubDatasetGraphQuery';
import TwinGraphBatchResult from '../model/TwinGraphBatchResult';

/**
* Dataset service.
* @module api/DatasetApi
* @version 3.0.13-SNAPSHOT
*/
export default class DatasetApi {

    /**
    * Constructs a new DatasetApi. 
    * @alias module:api/DatasetApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Add a control access to the Dataset
     * @param {String} organizationId the Organization identifier
     * @param {String} datasetId the Dataset identifier
     * @param {module:model/DatasetAccessControl} datasetAccessControl the new Dataset security access to add.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DatasetAccessControl} and HTTP response
     */
    addDatasetAccessControlWithHttpInfo(organizationId, datasetId, datasetAccessControl) {
      let postBody = datasetAccessControl;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling addDatasetAccessControl");
      }
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling addDatasetAccessControl");
      }
      // verify the required parameter 'datasetAccessControl' is set
      if (datasetAccessControl === undefined || datasetAccessControl === null) {
        throw new Error("Missing the required parameter 'datasetAccessControl' when calling addDatasetAccessControl");
      }

      let pathParams = {
        'organization_id': organizationId,
        'dataset_id': datasetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = ['application/json', 'application/yaml'];
      let accepts = ['application/json'];
      let returnType = DatasetAccessControl;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/datasets/{dataset_id}/security/access', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Add a control access to the Dataset
     * @param {String} organizationId the Organization identifier
     * @param {String} datasetId the Dataset identifier
     * @param {module:model/DatasetAccessControl} datasetAccessControl the new Dataset security access to add.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DatasetAccessControl}
     */
    addDatasetAccessControl(organizationId, datasetId, datasetAccessControl) {
      return this.addDatasetAccessControlWithHttpInfo(organizationId, datasetId, datasetAccessControl)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add Dataset Compatibility elements.
     * @param {String} organizationId the Organization identifier
     * @param {String} datasetId the Dataset identifier
     * @param {Array.<module:model/DatasetCompatibility>} datasetCompatibility the Dataset Compatibility elements
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/DatasetCompatibility>} and HTTP response
     */
    addOrReplaceDatasetCompatibilityElementsWithHttpInfo(organizationId, datasetId, datasetCompatibility) {
      let postBody = datasetCompatibility;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling addOrReplaceDatasetCompatibilityElements");
      }
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling addOrReplaceDatasetCompatibilityElements");
      }
      // verify the required parameter 'datasetCompatibility' is set
      if (datasetCompatibility === undefined || datasetCompatibility === null) {
        throw new Error("Missing the required parameter 'datasetCompatibility' when calling addOrReplaceDatasetCompatibilityElements");
      }

      let pathParams = {
        'organization_id': organizationId,
        'dataset_id': datasetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [DatasetCompatibility];
      return this.apiClient.callApi(
        '/organizations/{organization_id}/datasets/{dataset_id}/compatibility', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Add Dataset Compatibility elements.
     * @param {String} organizationId the Organization identifier
     * @param {String} datasetId the Dataset identifier
     * @param {Array.<module:model/DatasetCompatibility>} datasetCompatibility the Dataset Compatibility elements
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/DatasetCompatibility>}
     */
    addOrReplaceDatasetCompatibilityElements(organizationId, datasetId, datasetCompatibility) {
      return this.addOrReplaceDatasetCompatibilityElementsWithHttpInfo(organizationId, datasetId, datasetCompatibility)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Copy a Dataset to another Dataset.
     * Not implemented!
     * @param {String} organizationId the Organization identifier
     * @param {module:model/DatasetCopyParameters} datasetCopyParameters the Dataset copy parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DatasetCopyParameters} and HTTP response
     */
    copyDatasetWithHttpInfo(organizationId, datasetCopyParameters) {
      let postBody = datasetCopyParameters;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling copyDataset");
      }
      // verify the required parameter 'datasetCopyParameters' is set
      if (datasetCopyParameters === undefined || datasetCopyParameters === null) {
        throw new Error("Missing the required parameter 'datasetCopyParameters' when calling copyDataset");
      }

      let pathParams = {
        'organization_id': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = ['application/json', 'application/yaml'];
      let accepts = ['application/json'];
      let returnType = DatasetCopyParameters;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/datasets/copy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Copy a Dataset to another Dataset.
     * Not implemented!
     * @param {String} organizationId the Organization identifier
     * @param {module:model/DatasetCopyParameters} datasetCopyParameters the Dataset copy parameters
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DatasetCopyParameters}
     */
    copyDataset(organizationId, datasetCopyParameters) {
      return this.copyDatasetWithHttpInfo(organizationId, datasetCopyParameters)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new Dataset
     * @param {String} organizationId the Organization identifier
     * @param {module:model/Dataset} dataset the Dataset to create
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Dataset} and HTTP response
     */
    createDatasetWithHttpInfo(organizationId, dataset) {
      let postBody = dataset;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling createDataset");
      }
      // verify the required parameter 'dataset' is set
      if (dataset === undefined || dataset === null) {
        throw new Error("Missing the required parameter 'dataset' when calling createDataset");
      }

      let pathParams = {
        'organization_id': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = ['application/json', 'application/yaml'];
      let accepts = ['application/json'];
      let returnType = Dataset;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/datasets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a new Dataset
     * @param {String} organizationId the Organization identifier
     * @param {module:model/Dataset} dataset the Dataset to create
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Dataset}
     */
    createDataset(organizationId, dataset) {
      return this.createDatasetWithHttpInfo(organizationId, dataset)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a sub-dataset from the dataset in parameter
     * Create a copy of the dataset using the results of the list of queries given in parameter.
     * @param {String} organizationId the Organization identifier
     * @param {String} datasetId the Dataset identifier
     * @param {module:model/SubDatasetGraphQuery} subDatasetGraphQuery the Cypher query to filter
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Dataset} and HTTP response
     */
    createSubDatasetWithHttpInfo(organizationId, datasetId, subDatasetGraphQuery) {
      let postBody = subDatasetGraphQuery;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling createSubDataset");
      }
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling createSubDataset");
      }
      // verify the required parameter 'subDatasetGraphQuery' is set
      if (subDatasetGraphQuery === undefined || subDatasetGraphQuery === null) {
        throw new Error("Missing the required parameter 'subDatasetGraphQuery' when calling createSubDataset");
      }

      let pathParams = {
        'organization_id': organizationId,
        'dataset_id': datasetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Dataset;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/datasets/{dataset_id}/subdataset', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a sub-dataset from the dataset in parameter
     * Create a copy of the dataset using the results of the list of queries given in parameter.
     * @param {String} organizationId the Organization identifier
     * @param {String} datasetId the Dataset identifier
     * @param {module:model/SubDatasetGraphQuery} subDatasetGraphQuery the Cypher query to filter
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Dataset}
     */
    createSubDataset(organizationId, datasetId, subDatasetGraphQuery) {
      return this.createSubDatasetWithHttpInfo(organizationId, datasetId, subDatasetGraphQuery)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create new entities in a graph instance
     * create new entities in a graph instance
     * @param {String} organizationId the Organization identifier
     * @param {String} datasetId the Dataset Identifier
     * @param {module:model/String} type the entity model type
     * @param {Array.<module:model/GraphProperties>} graphProperties the entities to create
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    createTwingraphEntitiesWithHttpInfo(organizationId, datasetId, type, graphProperties) {
      let postBody = graphProperties;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling createTwingraphEntities");
      }
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling createTwingraphEntities");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling createTwingraphEntities");
      }
      // verify the required parameter 'graphProperties' is set
      if (graphProperties === undefined || graphProperties === null) {
        throw new Error("Missing the required parameter 'graphProperties' when calling createTwingraphEntities");
      }

      let pathParams = {
        'organization_id': organizationId,
        'dataset_id': datasetId,
        'type': type
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/organizations/{organization_id}/datasets/{dataset_id}/twingraph/{type}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create new entities in a graph instance
     * create new entities in a graph instance
     * @param {String} organizationId the Organization identifier
     * @param {String} datasetId the Dataset Identifier
     * @param {module:model/String} type the entity model type
     * @param {Array.<module:model/GraphProperties>} graphProperties the entities to create
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    createTwingraphEntities(organizationId, datasetId, type, graphProperties) {
      return this.createTwingraphEntitiesWithHttpInfo(organizationId, datasetId, type, graphProperties)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a dataset
     * @param {String} organizationId the Organization identifier
     * @param {String} datasetId the Dataset identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteDatasetWithHttpInfo(organizationId, datasetId) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteDataset");
      }
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling deleteDataset");
      }

      let pathParams = {
        'organization_id': organizationId,
        'dataset_id': datasetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/datasets/{dataset_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a dataset
     * @param {String} organizationId the Organization identifier
     * @param {String} datasetId the Dataset identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteDataset(organizationId, datasetId) {
      return this.deleteDatasetWithHttpInfo(organizationId, datasetId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete entities in a graph instance
     * delete entities in a graph instance
     * @param {String} organizationId the Organization identifier
     * @param {String} datasetId the Dataset Identifier
     * @param {module:model/String} type the entity model type
     * @param {Array.<String>} ids the entities to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteTwingraphEntitiesWithHttpInfo(organizationId, datasetId, type, ids) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteTwingraphEntities");
      }
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling deleteTwingraphEntities");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling deleteTwingraphEntities");
      }
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling deleteTwingraphEntities");
      }

      let pathParams = {
        'organization_id': organizationId,
        'dataset_id': datasetId,
        'type': type
      };
      let queryParams = {
        'ids': this.apiClient.buildCollectionParam(ids, 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/datasets/{dataset_id}/twingraph/{type}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete entities in a graph instance
     * delete entities in a graph instance
     * @param {String} organizationId the Organization identifier
     * @param {String} datasetId the Dataset Identifier
     * @param {module:model/String} type the entity model type
     * @param {Array.<String>} ids the entities to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteTwingraphEntities(organizationId, datasetId, type, ids) {
      return this.deleteTwingraphEntitiesWithHttpInfo(organizationId, datasetId, type, ids)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Download a graph as a zip file
     * Download the compressed graph reference by the hash in a zip file
     * @param {String} organizationId the Organization identifier
     * @param {String} hash the Graph download identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link File} and HTTP response
     */
    downloadTwingraphWithHttpInfo(organizationId, hash) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling downloadTwingraph");
      }
      // verify the required parameter 'hash' is set
      if (hash === undefined || hash === null) {
        throw new Error("Missing the required parameter 'hash' when calling downloadTwingraph");
      }

      let pathParams = {
        'organization_id': organizationId,
        'hash': hash
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = [];
      let accepts = ['application/octet-stream'];
      let returnType = File;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/datasets/twingraph/download/{hash}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Download a graph as a zip file
     * Download the compressed graph reference by the hash in a zip file
     * @param {String} organizationId the Organization identifier
     * @param {String} hash the Graph download identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link File}
     */
    downloadTwingraph(organizationId, hash) {
      return this.downloadTwingraphWithHttpInfo(organizationId, hash)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all Datasets
     * @param {String} organizationId the Organization identifier
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page page number to query
     * @param {Number} opts.size amount of result by page
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Dataset>} and HTTP response
     */
    findAllDatasetsWithHttpInfo(organizationId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling findAllDatasets");
      }

      let pathParams = {
        'organization_id': organizationId
      };
      let queryParams = {
        'page': opts['page'],
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Dataset];
      return this.apiClient.callApi(
        '/organizations/{organization_id}/datasets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List all Datasets
     * @param {String} organizationId the Organization identifier
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page page number to query
     * @param {Number} opts.size amount of result by page
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Dataset>}
     */
    findAllDatasets(organizationId, opts) {
      return this.findAllDatasetsWithHttpInfo(organizationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the details of a Dataset
     * @param {String} organizationId the Organization identifier
     * @param {String} datasetId the Dataset identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Dataset} and HTTP response
     */
    findDatasetByIdWithHttpInfo(organizationId, datasetId) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling findDatasetById");
      }
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling findDatasetById");
      }

      let pathParams = {
        'organization_id': organizationId,
        'dataset_id': datasetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Dataset;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/datasets/{dataset_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get the details of a Dataset
     * @param {String} organizationId the Organization identifier
     * @param {String} datasetId the Dataset identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Dataset}
     */
    findDatasetById(organizationId, datasetId) {
      return this.findDatasetByIdWithHttpInfo(organizationId, datasetId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a control access for the Dataset
     * @param {String} organizationId the Organization identifier
     * @param {String} datasetId the Dataset identifier
     * @param {String} identityId the User identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DatasetAccessControl} and HTTP response
     */
    getDatasetAccessControlWithHttpInfo(organizationId, datasetId, identityId) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getDatasetAccessControl");
      }
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling getDatasetAccessControl");
      }
      // verify the required parameter 'identityId' is set
      if (identityId === undefined || identityId === null) {
        throw new Error("Missing the required parameter 'identityId' when calling getDatasetAccessControl");
      }

      let pathParams = {
        'organization_id': organizationId,
        'dataset_id': datasetId,
        'identity_id': identityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DatasetAccessControl;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/datasets/{dataset_id}/security/access/{identity_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a control access for the Dataset
     * @param {String} organizationId the Organization identifier
     * @param {String} datasetId the Dataset identifier
     * @param {String} identityId the User identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DatasetAccessControl}
     */
    getDatasetAccessControl(organizationId, datasetId, identityId) {
      return this.getDatasetAccessControlWithHttpInfo(organizationId, datasetId, identityId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the Dataset security information
     * @param {String} organizationId the Organization identifier
     * @param {String} datasetId the Dataset identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DatasetSecurity} and HTTP response
     */
    getDatasetSecurityWithHttpInfo(organizationId, datasetId) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getDatasetSecurity");
      }
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling getDatasetSecurity");
      }

      let pathParams = {
        'organization_id': organizationId,
        'dataset_id': datasetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DatasetSecurity;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/datasets/{dataset_id}/security', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get the Dataset security information
     * @param {String} organizationId the Organization identifier
     * @param {String} datasetId the Dataset identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DatasetSecurity}
     */
    getDatasetSecurity(organizationId, datasetId) {
      return this.getDatasetSecurityWithHttpInfo(organizationId, datasetId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the Dataset security users list
     * @param {String} organizationId the Organization identifier
     * @param {String} datasetId the Dataset identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    getDatasetSecurityUsersWithHttpInfo(organizationId, datasetId) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getDatasetSecurityUsers");
      }
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling getDatasetSecurityUsers");
      }

      let pathParams = {
        'organization_id': organizationId,
        'dataset_id': datasetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/organizations/{organization_id}/datasets/{dataset_id}/security/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get the Dataset security users list
     * @param {String} organizationId the Organization identifier
     * @param {String} datasetId the Dataset identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    getDatasetSecurityUsers(organizationId, datasetId) {
      return this.getDatasetSecurityUsersWithHttpInfo(organizationId, datasetId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the dataset's refresh job status
     * Get the status of the import workflow lauch on the dataset's refresh.
     * @param {String} organizationId the Organization identifier
     * @param {String} datasetId the dataset identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    getDatasetTwingraphStatusWithHttpInfo(organizationId, datasetId) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getDatasetTwingraphStatus");
      }
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling getDatasetTwingraphStatus");
      }

      let pathParams = {
        'organization_id': organizationId,
        'dataset_id': datasetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = [];
      let accepts = ['application/yaml', 'application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/organizations/{organization_id}/datasets/{dataset_id}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get the dataset's refresh job status
     * Get the status of the import workflow lauch on the dataset's refresh.
     * @param {String} organizationId the Organization identifier
     * @param {String} datasetId the dataset identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    getDatasetTwingraphStatus(organizationId, datasetId) {
      return this.getDatasetTwingraphStatusWithHttpInfo(organizationId, datasetId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get entities in a graph instance
     * get entities in a graph instance
     * @param {String} organizationId the Organization identifier
     * @param {String} datasetId the Dataset Identifier
     * @param {module:model/String} type the entity model type
     * @param {Array.<String>} ids the entities to get
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    getTwingraphEntitiesWithHttpInfo(organizationId, datasetId, type, ids) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getTwingraphEntities");
      }
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling getTwingraphEntities");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling getTwingraphEntities");
      }
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling getTwingraphEntities");
      }

      let pathParams = {
        'organization_id': organizationId,
        'dataset_id': datasetId,
        'type': type
      };
      let queryParams = {
        'ids': this.apiClient.buildCollectionParam(ids, 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/organizations/{organization_id}/datasets/{dataset_id}/twingraph/{type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get entities in a graph instance
     * get entities in a graph instance
     * @param {String} organizationId the Organization identifier
     * @param {String} datasetId the Dataset Identifier
     * @param {module:model/String} type the entity model type
     * @param {Array.<String>} ids the entities to get
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    getTwingraphEntities(organizationId, datasetId, type, ids) {
      return this.getTwingraphEntitiesWithHttpInfo(organizationId, datasetId, type, ids)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Refresh data on dataset from dataset's source
     * Lauch a import from source (ADT or Azure Storage). This replace currently stored data with just extracted data from source.
     * @param {String} organizationId the Organization identifier
     * @param {String} datasetId the Dataset identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DatasetTwinGraphInfo} and HTTP response
     */
    refreshDatasetWithHttpInfo(organizationId, datasetId) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling refreshDataset");
      }
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling refreshDataset");
      }

      let pathParams = {
        'organization_id': organizationId,
        'dataset_id': datasetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DatasetTwinGraphInfo;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/datasets/{dataset_id}/refresh', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Refresh data on dataset from dataset's source
     * Lauch a import from source (ADT or Azure Storage). This replace currently stored data with just extracted data from source.
     * @param {String} organizationId the Organization identifier
     * @param {String} datasetId the Dataset identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DatasetTwinGraphInfo}
     */
    refreshDataset(organizationId, datasetId) {
      return this.refreshDatasetWithHttpInfo(organizationId, datasetId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove all Dataset Compatibility elements from the Dataset specified
     * @param {String} organizationId the Organization identifier
     * @param {String} datasetId the Dataset identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeAllDatasetCompatibilityElementsWithHttpInfo(organizationId, datasetId) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling removeAllDatasetCompatibilityElements");
      }
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling removeAllDatasetCompatibilityElements");
      }

      let pathParams = {
        'organization_id': organizationId,
        'dataset_id': datasetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/datasets/{dataset_id}/compatibility', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove all Dataset Compatibility elements from the Dataset specified
     * @param {String} organizationId the Organization identifier
     * @param {String} datasetId the Dataset identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeAllDatasetCompatibilityElements(organizationId, datasetId) {
      return this.removeAllDatasetCompatibilityElementsWithHttpInfo(organizationId, datasetId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove the specified access from the given Dataset
     * @param {String} organizationId the Organization identifier
     * @param {String} datasetId the Dataset identifier
     * @param {String} identityId the User identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeDatasetAccessControlWithHttpInfo(organizationId, datasetId, identityId) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling removeDatasetAccessControl");
      }
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling removeDatasetAccessControl");
      }
      // verify the required parameter 'identityId' is set
      if (identityId === undefined || identityId === null) {
        throw new Error("Missing the required parameter 'identityId' when calling removeDatasetAccessControl");
      }

      let pathParams = {
        'organization_id': organizationId,
        'dataset_id': datasetId,
        'identity_id': identityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/datasets/{dataset_id}/security/access/{identity_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove the specified access from the given Dataset
     * @param {String} organizationId the Organization identifier
     * @param {String} datasetId the Dataset identifier
     * @param {String} identityId the User identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeDatasetAccessControl(organizationId, datasetId, identityId) {
      return this.removeDatasetAccessControlWithHttpInfo(organizationId, datasetId, identityId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Search Datasets by tags
     * @param {String} organizationId the Organization identifier
     * @param {module:model/DatasetSearch} datasetSearch the Dataset search parameters
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page page number to query
     * @param {Number} opts.size amount of result by page
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Dataset>} and HTTP response
     */
    searchDatasetsWithHttpInfo(organizationId, datasetSearch, opts) {
      opts = opts || {};
      let postBody = datasetSearch;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling searchDatasets");
      }
      // verify the required parameter 'datasetSearch' is set
      if (datasetSearch === undefined || datasetSearch === null) {
        throw new Error("Missing the required parameter 'datasetSearch' when calling searchDatasets");
      }

      let pathParams = {
        'organization_id': organizationId
      };
      let queryParams = {
        'page': opts['page'],
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = ['application/json', 'application/yaml'];
      let accepts = ['application/json'];
      let returnType = [Dataset];
      return this.apiClient.callApi(
        '/organizations/{organization_id}/datasets/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Search Datasets by tags
     * @param {String} organizationId the Organization identifier
     * @param {module:model/DatasetSearch} datasetSearch the Dataset search parameters
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page page number to query
     * @param {Number} opts.size amount of result by page
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Dataset>}
     */
    searchDatasets(organizationId, datasetSearch, opts) {
      return this.searchDatasetsWithHttpInfo(organizationId, datasetSearch, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Set the Dataset default security
     * @param {String} organizationId the Organization identifier
     * @param {String} datasetId the Dataset identifier
     * @param {module:model/DatasetRole} datasetRole This change the dataset default security. The default security is the role assigned to any person not on the Access Control List. If the default security is None, then nobody outside of the ACL can access the dataset.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DatasetSecurity} and HTTP response
     */
    setDatasetDefaultSecurityWithHttpInfo(organizationId, datasetId, datasetRole) {
      let postBody = datasetRole;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling setDatasetDefaultSecurity");
      }
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling setDatasetDefaultSecurity");
      }
      // verify the required parameter 'datasetRole' is set
      if (datasetRole === undefined || datasetRole === null) {
        throw new Error("Missing the required parameter 'datasetRole' when calling setDatasetDefaultSecurity");
      }

      let pathParams = {
        'organization_id': organizationId,
        'dataset_id': datasetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = ['application/json', 'application/yaml'];
      let accepts = ['application/json'];
      let returnType = DatasetSecurity;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/datasets/{dataset_id}/security/default', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Set the Dataset default security
     * @param {String} organizationId the Organization identifier
     * @param {String} datasetId the Dataset identifier
     * @param {module:model/DatasetRole} datasetRole This change the dataset default security. The default security is the role assigned to any person not on the Access Control List. If the default security is None, then nobody outside of the ACL can access the dataset.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DatasetSecurity}
     */
    setDatasetDefaultSecurity(organizationId, datasetId, datasetRole) {
      return this.setDatasetDefaultSecurityWithHttpInfo(organizationId, datasetId, datasetRole)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Run a query on a graph instance and return the result as a zip file in async mode
     * Run a query on a graph instance and return the result as a zip file in async mode
     * @param {String} organizationId the Organization identifier
     * @param {String} datasetId the Graph Identifier
     * @param {module:model/DatasetTwinGraphQuery} datasetTwinGraphQuery the query to run
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DatasetTwinGraphHash} and HTTP response
     */
    twingraphBatchQueryWithHttpInfo(organizationId, datasetId, datasetTwinGraphQuery) {
      let postBody = datasetTwinGraphQuery;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling twingraphBatchQuery");
      }
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling twingraphBatchQuery");
      }
      // verify the required parameter 'datasetTwinGraphQuery' is set
      if (datasetTwinGraphQuery === undefined || datasetTwinGraphQuery === null) {
        throw new Error("Missing the required parameter 'datasetTwinGraphQuery' when calling twingraphBatchQuery");
      }

      let pathParams = {
        'organization_id': organizationId,
        'dataset_id': datasetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DatasetTwinGraphHash;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/datasets/{dataset_id}/batch-query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Run a query on a graph instance and return the result as a zip file in async mode
     * Run a query on a graph instance and return the result as a zip file in async mode
     * @param {String} organizationId the Organization identifier
     * @param {String} datasetId the Graph Identifier
     * @param {module:model/DatasetTwinGraphQuery} datasetTwinGraphQuery the query to run
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DatasetTwinGraphHash}
     */
    twingraphBatchQuery(organizationId, datasetId, datasetTwinGraphQuery) {
      return this.twingraphBatchQueryWithHttpInfo(organizationId, datasetId, datasetTwinGraphQuery)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Async batch update by loading a CSV file on a graph instance 
     * Async batch update by loading a CSV file on a graph instance 
     * @param {String} organizationId the Organization identifier
     * @param {String} datasetId the Dataset Identifier
     * @param {module:model/DatasetTwinGraphQuery} twinGraphQuery 
     * @param {File} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TwinGraphBatchResult} and HTTP response
     */
    twingraphBatchUpdateWithHttpInfo(organizationId, datasetId, twinGraphQuery, body) {
      let postBody = body;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling twingraphBatchUpdate");
      }
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling twingraphBatchUpdate");
      }
      // verify the required parameter 'twinGraphQuery' is set
      if (twinGraphQuery === undefined || twinGraphQuery === null) {
        throw new Error("Missing the required parameter 'twinGraphQuery' when calling twingraphBatchUpdate");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling twingraphBatchUpdate");
      }

      let pathParams = {
        'organization_id': organizationId,
        'dataset_id': datasetId
      };
      let queryParams = {
        'twinGraphQuery': twinGraphQuery
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = ['text/csv', 'application/octet-stream'];
      let accepts = ['application/json'];
      let returnType = TwinGraphBatchResult;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/datasets/{dataset_id}/batch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Async batch update by loading a CSV file on a graph instance 
     * Async batch update by loading a CSV file on a graph instance 
     * @param {String} organizationId the Organization identifier
     * @param {String} datasetId the Dataset Identifier
     * @param {module:model/DatasetTwinGraphQuery} twinGraphQuery 
     * @param {File} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TwinGraphBatchResult}
     */
    twingraphBatchUpdate(organizationId, datasetId, twinGraphQuery, body) {
      return this.twingraphBatchUpdateWithHttpInfo(organizationId, datasetId, twinGraphQuery, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Return the result of a query made on the graph instance as a json
     * Run a query on a graph instance and return the result as a json
     * @param {String} organizationId the Organization identifier
     * @param {String} datasetId the Dataset identifier
     * @param {module:model/DatasetTwinGraphQuery} datasetTwinGraphQuery the query to run
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    twingraphQueryWithHttpInfo(organizationId, datasetId, datasetTwinGraphQuery) {
      let postBody = datasetTwinGraphQuery;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling twingraphQuery");
      }
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling twingraphQuery");
      }
      // verify the required parameter 'datasetTwinGraphQuery' is set
      if (datasetTwinGraphQuery === undefined || datasetTwinGraphQuery === null) {
        throw new Error("Missing the required parameter 'datasetTwinGraphQuery' when calling twingraphQuery");
      }

      let pathParams = {
        'organization_id': organizationId,
        'dataset_id': datasetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/organizations/{organization_id}/datasets/{dataset_id}/twingraph', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Return the result of a query made on the graph instance as a json
     * Run a query on a graph instance and return the result as a json
     * @param {String} organizationId the Organization identifier
     * @param {String} datasetId the Dataset identifier
     * @param {module:model/DatasetTwinGraphQuery} datasetTwinGraphQuery the query to run
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    twingraphQuery(organizationId, datasetId, datasetTwinGraphQuery) {
      return this.twingraphQueryWithHttpInfo(organizationId, datasetId, datasetTwinGraphQuery)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a dataset
     * @param {String} organizationId the Organization identifier
     * @param {String} datasetId the Dataset identifier
     * @param {module:model/Dataset} dataset the new Dataset details.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Dataset} and HTTP response
     */
    updateDatasetWithHttpInfo(organizationId, datasetId, dataset) {
      let postBody = dataset;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateDataset");
      }
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling updateDataset");
      }
      // verify the required parameter 'dataset' is set
      if (dataset === undefined || dataset === null) {
        throw new Error("Missing the required parameter 'dataset' when calling updateDataset");
      }

      let pathParams = {
        'organization_id': organizationId,
        'dataset_id': datasetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = ['application/json', 'application/yaml'];
      let accepts = ['application/json'];
      let returnType = Dataset;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/datasets/{dataset_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a dataset
     * @param {String} organizationId the Organization identifier
     * @param {String} datasetId the Dataset identifier
     * @param {module:model/Dataset} dataset the new Dataset details.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Dataset}
     */
    updateDataset(organizationId, datasetId, dataset) {
      return this.updateDatasetWithHttpInfo(organizationId, datasetId, dataset)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update the specified access to User for a Dataset
     * @param {String} organizationId the Organization identifier
     * @param {String} datasetId the Dataset identifier
     * @param {String} identityId the User identifier
     * @param {module:model/DatasetRole} datasetRole The new Dataset Access Control
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DatasetAccessControl} and HTTP response
     */
    updateDatasetAccessControlWithHttpInfo(organizationId, datasetId, identityId, datasetRole) {
      let postBody = datasetRole;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateDatasetAccessControl");
      }
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling updateDatasetAccessControl");
      }
      // verify the required parameter 'identityId' is set
      if (identityId === undefined || identityId === null) {
        throw new Error("Missing the required parameter 'identityId' when calling updateDatasetAccessControl");
      }
      // verify the required parameter 'datasetRole' is set
      if (datasetRole === undefined || datasetRole === null) {
        throw new Error("Missing the required parameter 'datasetRole' when calling updateDatasetAccessControl");
      }

      let pathParams = {
        'organization_id': organizationId,
        'dataset_id': datasetId,
        'identity_id': identityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DatasetAccessControl;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/datasets/{dataset_id}/security/access/{identity_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update the specified access to User for a Dataset
     * @param {String} organizationId the Organization identifier
     * @param {String} datasetId the Dataset identifier
     * @param {String} identityId the User identifier
     * @param {module:model/DatasetRole} datasetRole The new Dataset Access Control
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DatasetAccessControl}
     */
    updateDatasetAccessControl(organizationId, datasetId, identityId, datasetRole) {
      return this.updateDatasetAccessControlWithHttpInfo(organizationId, datasetId, identityId, datasetRole)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update entities in a graph instance
     * update entities in a graph instance
     * @param {String} organizationId the Organization identifier
     * @param {String} datasetId the Dataset Identifier
     * @param {module:model/String} type the entity model type
     * @param {Array.<module:model/GraphProperties>} graphProperties the entities to update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    updateTwingraphEntitiesWithHttpInfo(organizationId, datasetId, type, graphProperties) {
      let postBody = graphProperties;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateTwingraphEntities");
      }
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling updateTwingraphEntities");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling updateTwingraphEntities");
      }
      // verify the required parameter 'graphProperties' is set
      if (graphProperties === undefined || graphProperties === null) {
        throw new Error("Missing the required parameter 'graphProperties' when calling updateTwingraphEntities");
      }

      let pathParams = {
        'organization_id': organizationId,
        'dataset_id': datasetId,
        'type': type
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/organizations/{organization_id}/datasets/{dataset_id}/twingraph/{type}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update entities in a graph instance
     * update entities in a graph instance
     * @param {String} organizationId the Organization identifier
     * @param {String} datasetId the Dataset Identifier
     * @param {module:model/String} type the entity model type
     * @param {Array.<module:model/GraphProperties>} graphProperties the entities to update
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    updateTwingraphEntities(organizationId, datasetId, type, graphProperties) {
      return this.updateTwingraphEntitiesWithHttpInfo(organizationId, datasetId, type, graphProperties)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Upload data from zip file to dataset's twingraph
     * To create a new graph from flat files,  you need to create a Zip file. This Zip file must countain two folders named Edges and Nodes.  .zip hierarchy: *main_folder/Nodes *main_folder/Edges  In each folder you can place one or multiple csv files containing your Nodes or Edges data.  Your csv files must follow the following header (column name) requirements:  The Nodes CSVs requires at least one column (the 1st).Column name = 'id'. It will represent the nodes ID Ids must be populated with string  The Edges CSVs require three columns named, in order, * source * target * id  those colomns represent * The source of the edge * The target of the edge * The id of the edge  All following columns content are up to you. 
     * @param {String} organizationId the Organization identifier
     * @param {String} datasetId the Dataset identifier
     * @param {File} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    uploadTwingraphWithHttpInfo(organizationId, datasetId, body) {
      let postBody = body;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling uploadTwingraph");
      }
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling uploadTwingraph");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling uploadTwingraph");
      }

      let pathParams = {
        'organization_id': organizationId,
        'dataset_id': datasetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = ['application/octet-stream'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/datasets/{dataset_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Upload data from zip file to dataset's twingraph
     * To create a new graph from flat files,  you need to create a Zip file. This Zip file must countain two folders named Edges and Nodes.  .zip hierarchy: *main_folder/Nodes *main_folder/Edges  In each folder you can place one or multiple csv files containing your Nodes or Edges data.  Your csv files must follow the following header (column name) requirements:  The Nodes CSVs requires at least one column (the 1st).Column name = 'id'. It will represent the nodes ID Ids must be populated with string  The Edges CSVs require three columns named, in order, * source * target * id  those colomns represent * The source of the edge * The target of the edge * The id of the edge  All following columns content are up to you. 
     * @param {String} organizationId the Organization identifier
     * @param {String} datasetId the Dataset identifier
     * @param {File} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    uploadTwingraph(organizationId, datasetId, body) {
      return this.uploadTwingraphWithHttpInfo(organizationId, datasetId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
