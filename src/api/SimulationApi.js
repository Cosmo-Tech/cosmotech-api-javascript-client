/**
 * Cosmo Tech Plaform API
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Simulation from '../model/Simulation';
import SimulationBase from '../model/SimulationBase';
import SimulationLogs from '../model/SimulationLogs';
import SimulationLogsOptions from '../model/SimulationLogsOptions';
import SimulationSearch from '../model/SimulationSearch';
import SimulationStartContainers from '../model/SimulationStartContainers';
import SimulationStartScenario from '../model/SimulationStartScenario';
import SimulationStartSimulator from '../model/SimulationStartSimulator';

/**
* Simulation service.
* @module api/SimulationApi
* @version 0.0.1-SNAPSHOT
*/
export default class SimulationApi {

    /**
    * Constructs a new SimulationApi. 
    * @alias module:api/SimulationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteSimulation operation.
     * @callback module:api/SimulationApi~deleteSimulationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Simulation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a simulation
     * @param {String} organizationId the Organization identifier
     * @param {String} simulationId the Simulation identifier
     * @param {module:api/SimulationApi~deleteSimulationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Simulation}
     */
    deleteSimulation(organizationId, simulationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteSimulation");
      }
      // verify the required parameter 'simulationId' is set
      if (simulationId === undefined || simulationId === null) {
        throw new Error("Missing the required parameter 'simulationId' when calling deleteSimulation");
      }

      let pathParams = {
        'organization_id': organizationId,
        'simulation_id': simulationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Simulation;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/simulations/{simulation_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findSimulationById operation.
     * @callback module:api/SimulationApi~findSimulationByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Simulation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the details of a simulation
     * @param {String} organizationId the Organization identifier
     * @param {String} simulationId the Simulation identifier
     * @param {module:api/SimulationApi~findSimulationByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Simulation}
     */
    findSimulationById(organizationId, simulationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling findSimulationById");
      }
      // verify the required parameter 'simulationId' is set
      if (simulationId === undefined || simulationId === null) {
        throw new Error("Missing the required parameter 'simulationId' when calling findSimulationById");
      }

      let pathParams = {
        'organization_id': organizationId,
        'simulation_id': simulationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Simulation;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/simulations/{simulation_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getScenarioSimulation operation.
     * @callback module:api/SimulationApi~getScenarioSimulationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Simulation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get the Simulation for the Scenario
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @param {String} scenarioId the Scenario identifier
     * @param {String} simulationId the Simulation identifier
     * @param {module:api/SimulationApi~getScenarioSimulationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Simulation}
     */
    getScenarioSimulation(organizationId, workspaceId, scenarioId, simulationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getScenarioSimulation");
      }
      // verify the required parameter 'workspaceId' is set
      if (workspaceId === undefined || workspaceId === null) {
        throw new Error("Missing the required parameter 'workspaceId' when calling getScenarioSimulation");
      }
      // verify the required parameter 'scenarioId' is set
      if (scenarioId === undefined || scenarioId === null) {
        throw new Error("Missing the required parameter 'scenarioId' when calling getScenarioSimulation");
      }
      // verify the required parameter 'simulationId' is set
      if (simulationId === undefined || simulationId === null) {
        throw new Error("Missing the required parameter 'simulationId' when calling getScenarioSimulation");
      }

      let pathParams = {
        'organization_id': organizationId,
        'workspace_id': workspaceId,
        'scenario_id': scenarioId,
        'simulation_id': simulationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Simulation;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/workspaces/{workspace_id}/scenarios/{scenario_id}/simulations/{simulation_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getScenarioSimulationLogs operation.
     * @callback module:api/SimulationApi~getScenarioSimulationLogsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SimulationLogs} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get the logs for the Simulation
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @param {String} scenarioId the Scenario identifier
     * @param {String} simulationId the Simulation identifier
     * @param {module:api/SimulationApi~getScenarioSimulationLogsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SimulationLogs}
     */
    getScenarioSimulationLogs(organizationId, workspaceId, scenarioId, simulationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getScenarioSimulationLogs");
      }
      // verify the required parameter 'workspaceId' is set
      if (workspaceId === undefined || workspaceId === null) {
        throw new Error("Missing the required parameter 'workspaceId' when calling getScenarioSimulationLogs");
      }
      // verify the required parameter 'scenarioId' is set
      if (scenarioId === undefined || scenarioId === null) {
        throw new Error("Missing the required parameter 'scenarioId' when calling getScenarioSimulationLogs");
      }
      // verify the required parameter 'simulationId' is set
      if (simulationId === undefined || simulationId === null) {
        throw new Error("Missing the required parameter 'simulationId' when calling getScenarioSimulationLogs");
      }

      let pathParams = {
        'organization_id': organizationId,
        'workspace_id': workspaceId,
        'scenario_id': scenarioId,
        'simulation_id': simulationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SimulationLogs;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/workspaces/{workspace_id}/scenarios/{scenario_id}/simulations/{simulation_id}/logs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getScenarioSimulations operation.
     * @callback module:api/SimulationApi~getScenarioSimulationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SimulationBase>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get the list of Simulations for the Scenario
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @param {String} scenarioId the Scenario identifier
     * @param {module:api/SimulationApi~getScenarioSimulationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SimulationBase>}
     */
    getScenarioSimulations(organizationId, workspaceId, scenarioId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getScenarioSimulations");
      }
      // verify the required parameter 'workspaceId' is set
      if (workspaceId === undefined || workspaceId === null) {
        throw new Error("Missing the required parameter 'workspaceId' when calling getScenarioSimulations");
      }
      // verify the required parameter 'scenarioId' is set
      if (scenarioId === undefined || scenarioId === null) {
        throw new Error("Missing the required parameter 'scenarioId' when calling getScenarioSimulations");
      }

      let pathParams = {
        'organization_id': organizationId,
        'workspace_id': workspaceId,
        'scenario_id': scenarioId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SimulationBase];
      return this.apiClient.callApi(
        '/organizations/{organization_id}/workspaces/{workspace_id}/scenarios/{scenario_id}/simulations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWorkspaceSimulations operation.
     * @callback module:api/SimulationApi~getWorkspaceSimulationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SimulationBase>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get the list of Simulations for the Workspace
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @param {module:api/SimulationApi~getWorkspaceSimulationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SimulationBase>}
     */
    getWorkspaceSimulations(organizationId, workspaceId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getWorkspaceSimulations");
      }
      // verify the required parameter 'workspaceId' is set
      if (workspaceId === undefined || workspaceId === null) {
        throw new Error("Missing the required parameter 'workspaceId' when calling getWorkspaceSimulations");
      }

      let pathParams = {
        'organization_id': organizationId,
        'workspace_id': workspaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SimulationBase];
      return this.apiClient.callApi(
        '/organizations/{organization_id}/workspaces/{workspace_id}/simulations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the runScenario operation.
     * @callback module:api/SimulationApi~runScenarioCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SimulationBase} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * run a Simulation for the Scenario
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @param {String} scenarioId the Scenario identifier
     * @param {module:api/SimulationApi~runScenarioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SimulationBase}
     */
    runScenario(organizationId, workspaceId, scenarioId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling runScenario");
      }
      // verify the required parameter 'workspaceId' is set
      if (workspaceId === undefined || workspaceId === null) {
        throw new Error("Missing the required parameter 'workspaceId' when calling runScenario");
      }
      // verify the required parameter 'scenarioId' is set
      if (scenarioId === undefined || scenarioId === null) {
        throw new Error("Missing the required parameter 'scenarioId' when calling runScenario");
      }

      let pathParams = {
        'organization_id': organizationId,
        'workspace_id': workspaceId,
        'scenario_id': scenarioId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SimulationBase;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/workspaces/{workspace_id}/scenarios/{scenario_id}/run', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchSimulationLogs operation.
     * @callback module:api/SimulationApi~searchSimulationLogsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SimulationLogs} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search the logs of a simulation
     * @param {String} organizationId the Organization identifier
     * @param {String} simulationId the Simulation identifier
     * @param {module:model/SimulationLogsOptions} simulationLogsOptions the options to search logs
     * @param {module:api/SimulationApi~searchSimulationLogsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SimulationLogs}
     */
    searchSimulationLogs(organizationId, simulationId, simulationLogsOptions, callback) {
      let postBody = simulationLogsOptions;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling searchSimulationLogs");
      }
      // verify the required parameter 'simulationId' is set
      if (simulationId === undefined || simulationId === null) {
        throw new Error("Missing the required parameter 'simulationId' when calling searchSimulationLogs");
      }
      // verify the required parameter 'simulationLogsOptions' is set
      if (simulationLogsOptions === undefined || simulationLogsOptions === null) {
        throw new Error("Missing the required parameter 'simulationLogsOptions' when calling searchSimulationLogs");
      }

      let pathParams = {
        'organization_id': organizationId,
        'simulation_id': simulationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SimulationLogs;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/simulations/{simulation_id}/logs/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchSimulations operation.
     * @callback module:api/SimulationApi~searchSimulationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SimulationBase>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search Simulations
     * @param {String} organizationId the Organization identifier
     * @param {module:model/SimulationSearch} simulationSearch the Simulation search parameters
     * @param {module:api/SimulationApi~searchSimulationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SimulationBase>}
     */
    searchSimulations(organizationId, simulationSearch, callback) {
      let postBody = simulationSearch;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling searchSimulations");
      }
      // verify the required parameter 'simulationSearch' is set
      if (simulationSearch === undefined || simulationSearch === null) {
        throw new Error("Missing the required parameter 'simulationSearch' when calling searchSimulations");
      }

      let pathParams = {
        'organization_id': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [SimulationBase];
      return this.apiClient.callApi(
        '/organizations/{organization_id}/simulations/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startSimulationContainers operation.
     * @callback module:api/SimulationApi~startSimulationContainersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Simulation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start a new simulation with raw containers definition
     * @param {String} organizationId the Organization identifier
     * @param {module:model/SimulationStartContainers} simulationStartContainers the raw containers definition
     * @param {module:api/SimulationApi~startSimulationContainersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Simulation}
     */
    startSimulationContainers(organizationId, simulationStartContainers, callback) {
      let postBody = simulationStartContainers;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling startSimulationContainers");
      }
      // verify the required parameter 'simulationStartContainers' is set
      if (simulationStartContainers === undefined || simulationStartContainers === null) {
        throw new Error("Missing the required parameter 'simulationStartContainers' when calling startSimulationContainers");
      }

      let pathParams = {
        'organization_id': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Simulation;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/simulations/startcontainers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startSimulationScenario operation.
     * @callback module:api/SimulationApi~startSimulationScenarioCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Simulation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start a new simulation for a Scenario
     * @param {String} organizationId the Organization identifier
     * @param {module:model/SimulationStartScenario} simulationStartScenario the Scenario information to start
     * @param {module:api/SimulationApi~startSimulationScenarioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Simulation}
     */
    startSimulationScenario(organizationId, simulationStartScenario, callback) {
      let postBody = simulationStartScenario;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling startSimulationScenario");
      }
      // verify the required parameter 'simulationStartScenario' is set
      if (simulationStartScenario === undefined || simulationStartScenario === null) {
        throw new Error("Missing the required parameter 'simulationStartScenario' when calling startSimulationScenario");
      }

      let pathParams = {
        'organization_id': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Simulation;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/simulations/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startSimulationSimulator operation.
     * @callback module:api/SimulationApi~startSimulationSimulatorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Simulation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start a new simulation for a Simulator Analysis
     * @param {String} organizationId the Organization identifier
     * @param {module:model/SimulationStartSimulator} simulationStartSimulator the Simulator Analysis information to start
     * @param {module:api/SimulationApi~startSimulationSimulatorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Simulation}
     */
    startSimulationSimulator(organizationId, simulationStartSimulator, callback) {
      let postBody = simulationStartSimulator;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling startSimulationSimulator");
      }
      // verify the required parameter 'simulationStartSimulator' is set
      if (simulationStartSimulator === undefined || simulationStartSimulator === null) {
        throw new Error("Missing the required parameter 'simulationStartSimulator' when calling startSimulationSimulator");
      }

      let pathParams = {
        'organization_id': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Simulation;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/simulations/startsimulator', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
