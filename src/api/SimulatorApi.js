/**
 * Cosmo Tech Plaform API
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Simulator from '../model/Simulator';

/**
* Simulator service.
* @module api/SimulatorApi
* @version 0.0.1-SNAPSHOT
*/
export default class SimulatorApi {

    /**
    * Constructs a new SimulatorApi. 
    * @alias module:api/SimulatorApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createSimulator operation.
     * @callback module:api/SimulatorApi~createSimulatorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Simulator} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register a new simulator
     * @param {String} organizationId the Organization identifier
     * @param {module:model/Simulator} simulator the Simulator to create
     * @param {module:api/SimulatorApi~createSimulatorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Simulator}
     */
    createSimulator(organizationId, simulator, callback) {
      let postBody = simulator;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling createSimulator");
      }
      // verify the required parameter 'simulator' is set
      if (simulator === undefined || simulator === null) {
        throw new Error("Missing the required parameter 'simulator' when calling createSimulator");
      }

      let pathParams = {
        'organization_id': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AADOAuth2AuthCode', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Simulator;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/simulators', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSimulator operation.
     * @callback module:api/SimulatorApi~deleteSimulatorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Simulator} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a simulator
     * @param {String} organizationId the Organization identifier
     * @param {String} simulatorId the Simulator identifier
     * @param {module:api/SimulatorApi~deleteSimulatorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Simulator}
     */
    deleteSimulator(organizationId, simulatorId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteSimulator");
      }
      // verify the required parameter 'simulatorId' is set
      if (simulatorId === undefined || simulatorId === null) {
        throw new Error("Missing the required parameter 'simulatorId' when calling deleteSimulator");
      }

      let pathParams = {
        'organization_id': organizationId,
        'simulator_id': simulatorId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AADOAuth2AuthCode', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Simulator;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/simulators/{simulator_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findAllSimulators operation.
     * @callback module:api/SimulatorApi~findAllSimulatorsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Simulator>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all Simulators
     * @param {String} organizationId the Organization identifier
     * @param {module:api/SimulatorApi~findAllSimulatorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Simulator>}
     */
    findAllSimulators(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling findAllSimulators");
      }

      let pathParams = {
        'organization_id': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AADOAuth2AuthCode', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Simulator];
      return this.apiClient.callApi(
        '/organizations/{organization_id}/simulators', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findSimulatorById operation.
     * @callback module:api/SimulatorApi~findSimulatorByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Simulator} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the details of a simulator
     * @param {String} organizationId the Organization identifier
     * @param {String} simulatorId the Simulator identifier
     * @param {module:api/SimulatorApi~findSimulatorByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Simulator}
     */
    findSimulatorById(organizationId, simulatorId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling findSimulatorById");
      }
      // verify the required parameter 'simulatorId' is set
      if (simulatorId === undefined || simulatorId === null) {
        throw new Error("Missing the required parameter 'simulatorId' when calling findSimulatorById");
      }

      let pathParams = {
        'organization_id': organizationId,
        'simulator_id': simulatorId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AADOAuth2AuthCode', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Simulator;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/simulators/{simulator_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSimulator operation.
     * @callback module:api/SimulatorApi~updateSimulatorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Simulator} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a simulator
     * @param {String} organizationId the Organization identifier
     * @param {String} simulatorId the Simulator identifier
     * @param {module:model/Simulator} simulator the new Simulator details.
     * @param {module:api/SimulatorApi~updateSimulatorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Simulator}
     */
    updateSimulator(organizationId, simulatorId, simulator, callback) {
      let postBody = simulator;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateSimulator");
      }
      // verify the required parameter 'simulatorId' is set
      if (simulatorId === undefined || simulatorId === null) {
        throw new Error("Missing the required parameter 'simulatorId' when calling updateSimulator");
      }
      // verify the required parameter 'simulator' is set
      if (simulator === undefined || simulator === null) {
        throw new Error("Missing the required parameter 'simulator' when calling updateSimulator");
      }

      let pathParams = {
        'organization_id': organizationId,
        'simulator_id': simulatorId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AADOAuth2AuthCode', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Simulator;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/simulators/{simulator_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
