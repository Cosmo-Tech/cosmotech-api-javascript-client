/**
 * Cosmo Tech Plaform API
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Platform from '../model/Platform';

/**
* Platform service.
* @module api/PlatformApi
* @version 0.0.1-SNAPSHOT
*/
export default class PlatformApi {

    /**
    * Constructs a new PlatformApi. 
    * @alias module:api/PlatformApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createPlatform operation.
     * @callback module:api/PlatformApi~createPlatformCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Platform} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new platform
     * @param {module:model/Platform} platform the Platform to create
     * @param {module:api/PlatformApi~createPlatformCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Platform}
     */
    createPlatform(platform, callback) {
      let postBody = platform;
      // verify the required parameter 'platform' is set
      if (platform === undefined || platform === null) {
        throw new Error("Missing the required parameter 'platform' when calling createPlatform");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Platform;
      return this.apiClient.callApi(
        '/platform', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPlatform operation.
     * @callback module:api/PlatformApi~getPlatformCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Platform} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the details of the platform
     * @param {module:api/PlatformApi~getPlatformCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Platform}
     */
    getPlatform(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Platform;
      return this.apiClient.callApi(
        '/platform', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePlatform operation.
     * @callback module:api/PlatformApi~updatePlatformCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Platform} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a platform
     * @param {module:model/Platform} platform the new Platform details.
     * @param {module:api/PlatformApi~updatePlatformCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Platform}
     */
    updatePlatform(platform, callback) {
      let postBody = platform;
      // verify the required parameter 'platform' is set
      if (platform === undefined || platform === null) {
        throw new Error("Missing the required parameter 'platform' when calling updatePlatform");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Platform;
      return this.apiClient.callApi(
        '/platform', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
