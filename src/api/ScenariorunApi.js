/**
 * Cosmo Tech Plaform API
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ScenarioRun from '../model/ScenarioRun';
import ScenarioRunBase from '../model/ScenarioRunBase';
import ScenarioRunLogs from '../model/ScenarioRunLogs';
import ScenarioRunLogsOptions from '../model/ScenarioRunLogsOptions';
import ScenarioRunSearch from '../model/ScenarioRunSearch';
import ScenarioRunStart from '../model/ScenarioRunStart';
import ScenarioRunStartContainers from '../model/ScenarioRunStartContainers';
import ScenarioRunStartSolution from '../model/ScenarioRunStartSolution';

/**
* Scenariorun service.
* @module api/ScenariorunApi
* @version 0.0.1-SNAPSHOT
*/
export default class ScenariorunApi {

    /**
    * Constructs a new ScenariorunApi. 
    * @alias module:api/ScenariorunApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteScenarioRun operation.
     * @callback module:api/ScenariorunApi~deleteScenarioRunCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScenarioRun} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a scenariorun
     * @param {String} organizationId the Organization identifier
     * @param {String} scenariorunId the ScenarioRun identifier
     * @param {module:api/ScenariorunApi~deleteScenarioRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScenarioRun}
     */
    deleteScenarioRun(organizationId, scenariorunId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteScenarioRun");
      }
      // verify the required parameter 'scenariorunId' is set
      if (scenariorunId === undefined || scenariorunId === null) {
        throw new Error("Missing the required parameter 'scenariorunId' when calling deleteScenarioRun");
      }

      let pathParams = {
        'organization_id': organizationId,
        'scenariorun_id': scenariorunId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScenarioRun;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/scenarioruns/{scenariorun_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findScenarioRunById operation.
     * @callback module:api/ScenariorunApi~findScenarioRunByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScenarioRun} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the details of a scenariorun
     * @param {String} organizationId the Organization identifier
     * @param {String} scenariorunId the ScenarioRun identifier
     * @param {module:api/ScenariorunApi~findScenarioRunByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScenarioRun}
     */
    findScenarioRunById(organizationId, scenariorunId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling findScenarioRunById");
      }
      // verify the required parameter 'scenariorunId' is set
      if (scenariorunId === undefined || scenariorunId === null) {
        throw new Error("Missing the required parameter 'scenariorunId' when calling findScenarioRunById");
      }

      let pathParams = {
        'organization_id': organizationId,
        'scenariorun_id': scenariorunId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScenarioRun;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/scenarioruns/{scenariorun_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getScenarioScenarioRun operation.
     * @callback module:api/ScenariorunApi~getScenarioScenarioRunCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScenarioRun} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get the ScenarioRun for the Scenario
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @param {String} scenarioId the Scenario identifier
     * @param {String} scenariorunId the ScenarioRun identifier
     * @param {module:api/ScenariorunApi~getScenarioScenarioRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScenarioRun}
     */
    getScenarioScenarioRun(organizationId, workspaceId, scenarioId, scenariorunId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getScenarioScenarioRun");
      }
      // verify the required parameter 'workspaceId' is set
      if (workspaceId === undefined || workspaceId === null) {
        throw new Error("Missing the required parameter 'workspaceId' when calling getScenarioScenarioRun");
      }
      // verify the required parameter 'scenarioId' is set
      if (scenarioId === undefined || scenarioId === null) {
        throw new Error("Missing the required parameter 'scenarioId' when calling getScenarioScenarioRun");
      }
      // verify the required parameter 'scenariorunId' is set
      if (scenariorunId === undefined || scenariorunId === null) {
        throw new Error("Missing the required parameter 'scenariorunId' when calling getScenarioScenarioRun");
      }

      let pathParams = {
        'organization_id': organizationId,
        'workspace_id': workspaceId,
        'scenario_id': scenarioId,
        'scenariorun_id': scenariorunId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScenarioRun;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/workspaces/{workspace_id}/scenarios/{scenario_id}/scenarioruns/{scenariorun_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getScenarioScenarioRunLogs operation.
     * @callback module:api/ScenariorunApi~getScenarioScenarioRunLogsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScenarioRunLogs} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get the logs for the ScenarioRun
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @param {String} scenarioId the Scenario identifier
     * @param {String} scenariorunId the ScenarioRun identifier
     * @param {module:api/ScenariorunApi~getScenarioScenarioRunLogsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScenarioRunLogs}
     */
    getScenarioScenarioRunLogs(organizationId, workspaceId, scenarioId, scenariorunId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getScenarioScenarioRunLogs");
      }
      // verify the required parameter 'workspaceId' is set
      if (workspaceId === undefined || workspaceId === null) {
        throw new Error("Missing the required parameter 'workspaceId' when calling getScenarioScenarioRunLogs");
      }
      // verify the required parameter 'scenarioId' is set
      if (scenarioId === undefined || scenarioId === null) {
        throw new Error("Missing the required parameter 'scenarioId' when calling getScenarioScenarioRunLogs");
      }
      // verify the required parameter 'scenariorunId' is set
      if (scenariorunId === undefined || scenariorunId === null) {
        throw new Error("Missing the required parameter 'scenariorunId' when calling getScenarioScenarioRunLogs");
      }

      let pathParams = {
        'organization_id': organizationId,
        'workspace_id': workspaceId,
        'scenario_id': scenarioId,
        'scenariorun_id': scenariorunId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScenarioRunLogs;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/workspaces/{workspace_id}/scenarios/{scenario_id}/scenarioruns/{scenariorun_id}/logs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getScenarioScenarioRuns operation.
     * @callback module:api/ScenariorunApi~getScenarioScenarioRunsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ScenarioRunBase>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get the list of ScenarioRuns for the Scenario
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @param {String} scenarioId the Scenario identifier
     * @param {module:api/ScenariorunApi~getScenarioScenarioRunsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ScenarioRunBase>}
     */
    getScenarioScenarioRuns(organizationId, workspaceId, scenarioId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getScenarioScenarioRuns");
      }
      // verify the required parameter 'workspaceId' is set
      if (workspaceId === undefined || workspaceId === null) {
        throw new Error("Missing the required parameter 'workspaceId' when calling getScenarioScenarioRuns");
      }
      // verify the required parameter 'scenarioId' is set
      if (scenarioId === undefined || scenarioId === null) {
        throw new Error("Missing the required parameter 'scenarioId' when calling getScenarioScenarioRuns");
      }

      let pathParams = {
        'organization_id': organizationId,
        'workspace_id': workspaceId,
        'scenario_id': scenarioId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ScenarioRunBase];
      return this.apiClient.callApi(
        '/organizations/{organization_id}/workspaces/{workspace_id}/scenarios/{scenario_id}/scenarioruns', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWorkspaceScenarioRuns operation.
     * @callback module:api/ScenariorunApi~getWorkspaceScenarioRunsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ScenarioRunBase>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get the list of ScenarioRuns for the Workspace
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @param {module:api/ScenariorunApi~getWorkspaceScenarioRunsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ScenarioRunBase>}
     */
    getWorkspaceScenarioRuns(organizationId, workspaceId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getWorkspaceScenarioRuns");
      }
      // verify the required parameter 'workspaceId' is set
      if (workspaceId === undefined || workspaceId === null) {
        throw new Error("Missing the required parameter 'workspaceId' when calling getWorkspaceScenarioRuns");
      }

      let pathParams = {
        'organization_id': organizationId,
        'workspace_id': workspaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ScenarioRunBase];
      return this.apiClient.callApi(
        '/organizations/{organization_id}/workspaces/{workspace_id}/scenarioruns', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the runScenario operation.
     * @callback module:api/ScenariorunApi~runScenarioCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScenarioRunBase} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * run a ScenarioRun for the Scenario
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @param {String} scenarioId the Scenario identifier
     * @param {module:api/ScenariorunApi~runScenarioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScenarioRunBase}
     */
    runScenario(organizationId, workspaceId, scenarioId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling runScenario");
      }
      // verify the required parameter 'workspaceId' is set
      if (workspaceId === undefined || workspaceId === null) {
        throw new Error("Missing the required parameter 'workspaceId' when calling runScenario");
      }
      // verify the required parameter 'scenarioId' is set
      if (scenarioId === undefined || scenarioId === null) {
        throw new Error("Missing the required parameter 'scenarioId' when calling runScenario");
      }

      let pathParams = {
        'organization_id': organizationId,
        'workspace_id': workspaceId,
        'scenario_id': scenarioId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScenarioRunBase;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/workspaces/{workspace_id}/scenarios/{scenario_id}/run', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchScenarioRunLogs operation.
     * @callback module:api/ScenariorunApi~searchScenarioRunLogsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScenarioRunLogs} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search the logs of a scenariorun
     * @param {String} organizationId the Organization identifier
     * @param {String} scenariorunId the ScenarioRun identifier
     * @param {module:model/ScenarioRunLogsOptions} scenarioRunLogsOptions the options to search logs
     * @param {module:api/ScenariorunApi~searchScenarioRunLogsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScenarioRunLogs}
     */
    searchScenarioRunLogs(organizationId, scenariorunId, scenarioRunLogsOptions, callback) {
      let postBody = scenarioRunLogsOptions;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling searchScenarioRunLogs");
      }
      // verify the required parameter 'scenariorunId' is set
      if (scenariorunId === undefined || scenariorunId === null) {
        throw new Error("Missing the required parameter 'scenariorunId' when calling searchScenarioRunLogs");
      }
      // verify the required parameter 'scenarioRunLogsOptions' is set
      if (scenarioRunLogsOptions === undefined || scenarioRunLogsOptions === null) {
        throw new Error("Missing the required parameter 'scenarioRunLogsOptions' when calling searchScenarioRunLogs");
      }

      let pathParams = {
        'organization_id': organizationId,
        'scenariorun_id': scenariorunId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ScenarioRunLogs;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/scenarioruns/{scenariorun_id}/logs/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchScenarioRuns operation.
     * @callback module:api/ScenariorunApi~searchScenarioRunsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ScenarioRunBase>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search ScenarioRuns
     * @param {String} organizationId the Organization identifier
     * @param {module:model/ScenarioRunSearch} scenarioRunSearch the ScenarioRun search parameters
     * @param {module:api/ScenariorunApi~searchScenarioRunsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ScenarioRunBase>}
     */
    searchScenarioRuns(organizationId, scenarioRunSearch, callback) {
      let postBody = scenarioRunSearch;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling searchScenarioRuns");
      }
      // verify the required parameter 'scenarioRunSearch' is set
      if (scenarioRunSearch === undefined || scenarioRunSearch === null) {
        throw new Error("Missing the required parameter 'scenarioRunSearch' when calling searchScenarioRuns");
      }

      let pathParams = {
        'organization_id': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ScenarioRunBase];
      return this.apiClient.callApi(
        '/organizations/{organization_id}/scenarioruns/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startScenarioRunContainers operation.
     * @callback module:api/ScenariorunApi~startScenarioRunContainersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScenarioRun} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start a new scenariorun with raw containers definition
     * @param {String} organizationId the Organization identifier
     * @param {module:model/ScenarioRunStartContainers} scenarioRunStartContainers the raw containers definition
     * @param {module:api/ScenariorunApi~startScenarioRunContainersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScenarioRun}
     */
    startScenarioRunContainers(organizationId, scenarioRunStartContainers, callback) {
      let postBody = scenarioRunStartContainers;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling startScenarioRunContainers");
      }
      // verify the required parameter 'scenarioRunStartContainers' is set
      if (scenarioRunStartContainers === undefined || scenarioRunStartContainers === null) {
        throw new Error("Missing the required parameter 'scenarioRunStartContainers' when calling startScenarioRunContainers");
      }

      let pathParams = {
        'organization_id': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ScenarioRun;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/scenarioruns/startcontainers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startScenarioRunScenario operation.
     * @callback module:api/ScenariorunApi~startScenarioRunScenarioCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScenarioRun} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start a new scenariorun for a Scenario
     * @param {String} organizationId the Organization identifier
     * @param {module:model/ScenarioRunStart} scenarioRunStart the Scenario information to start
     * @param {module:api/ScenariorunApi~startScenarioRunScenarioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScenarioRun}
     */
    startScenarioRunScenario(organizationId, scenarioRunStart, callback) {
      let postBody = scenarioRunStart;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling startScenarioRunScenario");
      }
      // verify the required parameter 'scenarioRunStart' is set
      if (scenarioRunStart === undefined || scenarioRunStart === null) {
        throw new Error("Missing the required parameter 'scenarioRunStart' when calling startScenarioRunScenario");
      }

      let pathParams = {
        'organization_id': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ScenarioRun;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/scenarioruns/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startScenarioRunSolution operation.
     * @callback module:api/ScenariorunApi~startScenarioRunSolutionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScenarioRun} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start a new scenariorun for a Solution Run Template
     * @param {String} organizationId the Organization identifier
     * @param {module:model/ScenarioRunStartSolution} scenarioRunStartSolution the Solution Run Template information to start
     * @param {module:api/ScenariorunApi~startScenarioRunSolutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScenarioRun}
     */
    startScenarioRunSolution(organizationId, scenarioRunStartSolution, callback) {
      let postBody = scenarioRunStartSolution;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling startScenarioRunSolution");
      }
      // verify the required parameter 'scenarioRunStartSolution' is set
      if (scenarioRunStartSolution === undefined || scenarioRunStartSolution === null) {
        throw new Error("Missing the required parameter 'scenarioRunStartSolution' when calling startScenarioRunSolution");
      }

      let pathParams = {
        'organization_id': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ScenarioRun;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/scenarioruns/startsolution', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
