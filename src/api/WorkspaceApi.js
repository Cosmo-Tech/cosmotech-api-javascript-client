/**
 * Cosmo Tech Plaform API
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 3.0.1-dev
 * Contact: platform@cosmotech.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Workspace from '../model/Workspace';
import WorkspaceAccessControl from '../model/WorkspaceAccessControl';
import WorkspaceFile from '../model/WorkspaceFile';
import WorkspaceRole from '../model/WorkspaceRole';
import WorkspaceSecurity from '../model/WorkspaceSecurity';

/**
* Workspace service.
* @module api/WorkspaceApi
* @version 3.0.1-dev
*/
export default class WorkspaceApi {

    /**
    * Constructs a new WorkspaceApi. 
    * @alias module:api/WorkspaceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Add a control access to the Workspace
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @param {module:model/WorkspaceAccessControl} workspaceAccessControl the new Workspace security access to add.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/WorkspaceAccessControl} and HTTP response
     */
    addWorkspaceAccessControlWithHttpInfo(organizationId, workspaceId, workspaceAccessControl) {
      let postBody = workspaceAccessControl;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling addWorkspaceAccessControl");
      }
      // verify the required parameter 'workspaceId' is set
      if (workspaceId === undefined || workspaceId === null) {
        throw new Error("Missing the required parameter 'workspaceId' when calling addWorkspaceAccessControl");
      }
      // verify the required parameter 'workspaceAccessControl' is set
      if (workspaceAccessControl === undefined || workspaceAccessControl === null) {
        throw new Error("Missing the required parameter 'workspaceAccessControl' when calling addWorkspaceAccessControl");
      }

      let pathParams = {
        'organization_id': organizationId,
        'workspace_id': workspaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = ['application/json', 'application/yaml'];
      let accepts = ['application/json'];
      let returnType = WorkspaceAccessControl;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/workspaces/{workspace_id}/security/access', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Add a control access to the Workspace
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @param {module:model/WorkspaceAccessControl} workspaceAccessControl the new Workspace security access to add.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/WorkspaceAccessControl}
     */
    addWorkspaceAccessControl(organizationId, workspaceId, workspaceAccessControl) {
      return this.addWorkspaceAccessControlWithHttpInfo(organizationId, workspaceId, workspaceAccessControl)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new workspace
     * @param {String} organizationId the Organization identifier
     * @param {module:model/Workspace} workspace the Workspace to create
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Workspace} and HTTP response
     */
    createWorkspaceWithHttpInfo(organizationId, workspace) {
      let postBody = workspace;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling createWorkspace");
      }
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling createWorkspace");
      }

      let pathParams = {
        'organization_id': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = ['application/json', 'application/yaml'];
      let accepts = ['application/json'];
      let returnType = Workspace;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/workspaces', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a new workspace
     * @param {String} organizationId the Organization identifier
     * @param {module:model/Workspace} workspace the Workspace to create
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Workspace}
     */
    createWorkspace(organizationId, workspace) {
      return this.createWorkspaceWithHttpInfo(organizationId, workspace)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete all Workspace files
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteAllWorkspaceFilesWithHttpInfo(organizationId, workspaceId) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteAllWorkspaceFiles");
      }
      // verify the required parameter 'workspaceId' is set
      if (workspaceId === undefined || workspaceId === null) {
        throw new Error("Missing the required parameter 'workspaceId' when calling deleteAllWorkspaceFiles");
      }

      let pathParams = {
        'organization_id': organizationId,
        'workspace_id': workspaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/workspaces/{workspace_id}/files', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete all Workspace files
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteAllWorkspaceFiles(organizationId, workspaceId) {
      return this.deleteAllWorkspaceFilesWithHttpInfo(organizationId, workspaceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a workspace
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Workspace} and HTTP response
     */
    deleteWorkspaceWithHttpInfo(organizationId, workspaceId) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteWorkspace");
      }
      // verify the required parameter 'workspaceId' is set
      if (workspaceId === undefined || workspaceId === null) {
        throw new Error("Missing the required parameter 'workspaceId' when calling deleteWorkspace");
      }

      let pathParams = {
        'organization_id': organizationId,
        'workspace_id': workspaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Workspace;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/workspaces/{workspace_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a workspace
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Workspace}
     */
    deleteWorkspace(organizationId, workspaceId) {
      return this.deleteWorkspaceWithHttpInfo(organizationId, workspaceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a workspace file
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @param {String} fileName the file name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteWorkspaceFileWithHttpInfo(organizationId, workspaceId, fileName) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteWorkspaceFile");
      }
      // verify the required parameter 'workspaceId' is set
      if (workspaceId === undefined || workspaceId === null) {
        throw new Error("Missing the required parameter 'workspaceId' when calling deleteWorkspaceFile");
      }
      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling deleteWorkspaceFile");
      }

      let pathParams = {
        'organization_id': organizationId,
        'workspace_id': workspaceId
      };
      let queryParams = {
        'file_name': fileName
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/workspaces/{workspace_id}/files/delete', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a workspace file
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @param {String} fileName the file name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteWorkspaceFile(organizationId, workspaceId, fileName) {
      return this.deleteWorkspaceFileWithHttpInfo(organizationId, workspaceId, fileName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Download the Workspace File specified
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @param {String} fileName the file name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link File} and HTTP response
     */
    downloadWorkspaceFileWithHttpInfo(organizationId, workspaceId, fileName) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling downloadWorkspaceFile");
      }
      // verify the required parameter 'workspaceId' is set
      if (workspaceId === undefined || workspaceId === null) {
        throw new Error("Missing the required parameter 'workspaceId' when calling downloadWorkspaceFile");
      }
      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling downloadWorkspaceFile");
      }

      let pathParams = {
        'organization_id': organizationId,
        'workspace_id': workspaceId
      };
      let queryParams = {
        'file_name': fileName
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = [];
      let accepts = ['application/octet-stream'];
      let returnType = File;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/workspaces/{workspace_id}/files/download', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Download the Workspace File specified
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @param {String} fileName the file name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link File}
     */
    downloadWorkspaceFile(organizationId, workspaceId, fileName) {
      return this.downloadWorkspaceFileWithHttpInfo(organizationId, workspaceId, fileName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all Workspace files
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/WorkspaceFile>} and HTTP response
     */
    findAllWorkspaceFilesWithHttpInfo(organizationId, workspaceId) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling findAllWorkspaceFiles");
      }
      // verify the required parameter 'workspaceId' is set
      if (workspaceId === undefined || workspaceId === null) {
        throw new Error("Missing the required parameter 'workspaceId' when calling findAllWorkspaceFiles");
      }

      let pathParams = {
        'organization_id': organizationId,
        'workspace_id': workspaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [WorkspaceFile];
      return this.apiClient.callApi(
        '/organizations/{organization_id}/workspaces/{workspace_id}/files', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List all Workspace files
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/WorkspaceFile>}
     */
    findAllWorkspaceFiles(organizationId, workspaceId) {
      return this.findAllWorkspaceFilesWithHttpInfo(organizationId, workspaceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all Workspaces
     * @param {String} organizationId the Organization identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Workspace>} and HTTP response
     */
    findAllWorkspacesWithHttpInfo(organizationId) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling findAllWorkspaces");
      }

      let pathParams = {
        'organization_id': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Workspace];
      return this.apiClient.callApi(
        '/organizations/{organization_id}/workspaces', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List all Workspaces
     * @param {String} organizationId the Organization identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Workspace>}
     */
    findAllWorkspaces(organizationId) {
      return this.findAllWorkspacesWithHttpInfo(organizationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the details of an workspace
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Workspace} and HTTP response
     */
    findWorkspaceByIdWithHttpInfo(organizationId, workspaceId) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling findWorkspaceById");
      }
      // verify the required parameter 'workspaceId' is set
      if (workspaceId === undefined || workspaceId === null) {
        throw new Error("Missing the required parameter 'workspaceId' when calling findWorkspaceById");
      }

      let pathParams = {
        'organization_id': organizationId,
        'workspace_id': workspaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Workspace;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/workspaces/{workspace_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get the details of an workspace
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Workspace}
     */
    findWorkspaceById(organizationId, workspaceId) {
      return this.findWorkspaceByIdWithHttpInfo(organizationId, workspaceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a control access for the Workspace
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @param {String} identityId the User identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/WorkspaceAccessControl} and HTTP response
     */
    getWorkspaceAccessControlWithHttpInfo(organizationId, workspaceId, identityId) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getWorkspaceAccessControl");
      }
      // verify the required parameter 'workspaceId' is set
      if (workspaceId === undefined || workspaceId === null) {
        throw new Error("Missing the required parameter 'workspaceId' when calling getWorkspaceAccessControl");
      }
      // verify the required parameter 'identityId' is set
      if (identityId === undefined || identityId === null) {
        throw new Error("Missing the required parameter 'identityId' when calling getWorkspaceAccessControl");
      }

      let pathParams = {
        'organization_id': organizationId,
        'workspace_id': workspaceId,
        'identity_id': identityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkspaceAccessControl;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/workspaces/{workspace_id}/security/access/{identity_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a control access for the Workspace
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @param {String} identityId the User identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/WorkspaceAccessControl}
     */
    getWorkspaceAccessControl(organizationId, workspaceId, identityId) {
      return this.getWorkspaceAccessControlWithHttpInfo(organizationId, workspaceId, identityId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the Workspace permission by given role
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @param {String} role the Role
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    getWorkspacePermissionsWithHttpInfo(organizationId, workspaceId, role) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getWorkspacePermissions");
      }
      // verify the required parameter 'workspaceId' is set
      if (workspaceId === undefined || workspaceId === null) {
        throw new Error("Missing the required parameter 'workspaceId' when calling getWorkspacePermissions");
      }
      // verify the required parameter 'role' is set
      if (role === undefined || role === null) {
        throw new Error("Missing the required parameter 'role' when calling getWorkspacePermissions");
      }

      let pathParams = {
        'organization_id': organizationId,
        'workspace_id': workspaceId,
        'role': role
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/organizations/{organization_id}/workspaces/{workspace_id}/permissions/{role}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get the Workspace permission by given role
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @param {String} role the Role
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    getWorkspacePermissions(organizationId, workspaceId, role) {
      return this.getWorkspacePermissionsWithHttpInfo(organizationId, workspaceId, role)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the Workspace security information
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/WorkspaceSecurity} and HTTP response
     */
    getWorkspaceSecurityWithHttpInfo(organizationId, workspaceId) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getWorkspaceSecurity");
      }
      // verify the required parameter 'workspaceId' is set
      if (workspaceId === undefined || workspaceId === null) {
        throw new Error("Missing the required parameter 'workspaceId' when calling getWorkspaceSecurity");
      }

      let pathParams = {
        'organization_id': organizationId,
        'workspace_id': workspaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkspaceSecurity;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/workspaces/{workspace_id}/security', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get the Workspace security information
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/WorkspaceSecurity}
     */
    getWorkspaceSecurity(organizationId, workspaceId) {
      return this.getWorkspaceSecurityWithHttpInfo(organizationId, workspaceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the Workspace security users list
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    getWorkspaceSecurityUsersWithHttpInfo(organizationId, workspaceId) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getWorkspaceSecurityUsers");
      }
      // verify the required parameter 'workspaceId' is set
      if (workspaceId === undefined || workspaceId === null) {
        throw new Error("Missing the required parameter 'workspaceId' when calling getWorkspaceSecurityUsers");
      }

      let pathParams = {
        'organization_id': organizationId,
        'workspace_id': workspaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/organizations/{organization_id}/workspaces/{workspace_id}/security/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get the Workspace security users list
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    getWorkspaceSecurityUsers(organizationId, workspaceId) {
      return this.getWorkspaceSecurityUsersWithHttpInfo(organizationId, workspaceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove the specified access from the given Organization Workspace
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @param {String} identityId the User identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeWorkspaceAccessControlWithHttpInfo(organizationId, workspaceId, identityId) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling removeWorkspaceAccessControl");
      }
      // verify the required parameter 'workspaceId' is set
      if (workspaceId === undefined || workspaceId === null) {
        throw new Error("Missing the required parameter 'workspaceId' when calling removeWorkspaceAccessControl");
      }
      // verify the required parameter 'identityId' is set
      if (identityId === undefined || identityId === null) {
        throw new Error("Missing the required parameter 'identityId' when calling removeWorkspaceAccessControl");
      }

      let pathParams = {
        'organization_id': organizationId,
        'workspace_id': workspaceId,
        'identity_id': identityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/workspaces/{workspace_id}/security/access/{identity_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove the specified access from the given Organization Workspace
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @param {String} identityId the User identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeWorkspaceAccessControl(organizationId, workspaceId, identityId) {
      return this.removeWorkspaceAccessControlWithHttpInfo(organizationId, workspaceId, identityId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Set the Workspace default security
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @param {module:model/WorkspaceRole} workspaceRole the new Workspace default security.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/WorkspaceSecurity} and HTTP response
     */
    setWorkspaceDefaultSecurityWithHttpInfo(organizationId, workspaceId, workspaceRole) {
      let postBody = workspaceRole;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling setWorkspaceDefaultSecurity");
      }
      // verify the required parameter 'workspaceId' is set
      if (workspaceId === undefined || workspaceId === null) {
        throw new Error("Missing the required parameter 'workspaceId' when calling setWorkspaceDefaultSecurity");
      }
      // verify the required parameter 'workspaceRole' is set
      if (workspaceRole === undefined || workspaceRole === null) {
        throw new Error("Missing the required parameter 'workspaceRole' when calling setWorkspaceDefaultSecurity");
      }

      let pathParams = {
        'organization_id': organizationId,
        'workspace_id': workspaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = ['application/json', 'application/yaml'];
      let accepts = ['application/json'];
      let returnType = WorkspaceSecurity;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/workspaces/{workspace_id}/security/default', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Set the Workspace default security
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @param {module:model/WorkspaceRole} workspaceRole the new Workspace default security.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/WorkspaceSecurity}
     */
    setWorkspaceDefaultSecurity(organizationId, workspaceId, workspaceRole) {
      return this.setWorkspaceDefaultSecurityWithHttpInfo(organizationId, workspaceId, workspaceRole)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a workspace
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @param {module:model/Workspace} workspace The new Workspace details.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Workspace} and HTTP response
     */
    updateWorkspaceWithHttpInfo(organizationId, workspaceId, workspace) {
      let postBody = workspace;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateWorkspace");
      }
      // verify the required parameter 'workspaceId' is set
      if (workspaceId === undefined || workspaceId === null) {
        throw new Error("Missing the required parameter 'workspaceId' when calling updateWorkspace");
      }
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling updateWorkspace");
      }

      let pathParams = {
        'organization_id': organizationId,
        'workspace_id': workspaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = ['application/json', 'application/yaml'];
      let accepts = ['application/json'];
      let returnType = Workspace;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/workspaces/{workspace_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a workspace
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @param {module:model/Workspace} workspace The new Workspace details.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Workspace}
     */
    updateWorkspace(organizationId, workspaceId, workspace) {
      return this.updateWorkspaceWithHttpInfo(organizationId, workspaceId, workspace)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update the specified access to User for a Workspace
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @param {String} identityId the User identifier
     * @param {module:model/WorkspaceRole} workspaceRole The new Workspace Access Control
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/WorkspaceAccessControl} and HTTP response
     */
    updateWorkspaceAccessControlWithHttpInfo(organizationId, workspaceId, identityId, workspaceRole) {
      let postBody = workspaceRole;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateWorkspaceAccessControl");
      }
      // verify the required parameter 'workspaceId' is set
      if (workspaceId === undefined || workspaceId === null) {
        throw new Error("Missing the required parameter 'workspaceId' when calling updateWorkspaceAccessControl");
      }
      // verify the required parameter 'identityId' is set
      if (identityId === undefined || identityId === null) {
        throw new Error("Missing the required parameter 'identityId' when calling updateWorkspaceAccessControl");
      }
      // verify the required parameter 'workspaceRole' is set
      if (workspaceRole === undefined || workspaceRole === null) {
        throw new Error("Missing the required parameter 'workspaceRole' when calling updateWorkspaceAccessControl");
      }

      let pathParams = {
        'organization_id': organizationId,
        'workspace_id': workspaceId,
        'identity_id': identityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WorkspaceAccessControl;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/workspaces/{workspace_id}/security/access/{identity_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update the specified access to User for a Workspace
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @param {String} identityId the User identifier
     * @param {module:model/WorkspaceRole} workspaceRole The new Workspace Access Control
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/WorkspaceAccessControl}
     */
    updateWorkspaceAccessControl(organizationId, workspaceId, identityId, workspaceRole) {
      return this.updateWorkspaceAccessControlWithHttpInfo(organizationId, workspaceId, identityId, workspaceRole)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Upload a file for the Workspace
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @param {File} file 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overwrite  (default to false)
     * @param {String} opts.destination Destination path. Must end with a '/' if specifying a folder. Note that paths may or may not start with a '/', but they are always treated as relative to the Workspace root location. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/WorkspaceFile} and HTTP response
     */
    uploadWorkspaceFileWithHttpInfo(organizationId, workspaceId, file, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling uploadWorkspaceFile");
      }
      // verify the required parameter 'workspaceId' is set
      if (workspaceId === undefined || workspaceId === null) {
        throw new Error("Missing the required parameter 'workspaceId' when calling uploadWorkspaceFile");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling uploadWorkspaceFile");
      }

      let pathParams = {
        'organization_id': organizationId,
        'workspace_id': workspaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'overwrite': opts['overwrite'],
        'destination': opts['destination'],
        'file': file
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = WorkspaceFile;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/workspaces/{workspace_id}/files', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Upload a file for the Workspace
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @param {File} file 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overwrite  (default to false)
     * @param {String} opts.destination Destination path. Must end with a '/' if specifying a folder. Note that paths may or may not start with a '/', but they are always treated as relative to the Workspace root location. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/WorkspaceFile}
     */
    uploadWorkspaceFile(organizationId, workspaceId, file, opts) {
      return this.uploadWorkspaceFileWithHttpInfo(organizationId, workspaceId, file, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
