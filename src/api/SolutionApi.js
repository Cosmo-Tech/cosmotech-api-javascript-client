/**
 * Cosmo Tech Plaform API
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Solution from '../model/Solution';

/**
* Solution service.
* @module api/SolutionApi
* @version 0.0.1-SNAPSHOT
*/
export default class SolutionApi {

    /**
    * Constructs a new SolutionApi. 
    * @alias module:api/SolutionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createSolution operation.
     * @callback module:api/SolutionApi~createSolutionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Solution} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register a new solution
     * @param {String} organizationId the Organization identifier
     * @param {module:model/Solution} solution the Solution to create
     * @param {module:api/SolutionApi~createSolutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Solution}
     */
    createSolution(organizationId, solution, callback) {
      let postBody = solution;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling createSolution");
      }
      // verify the required parameter 'solution' is set
      if (solution === undefined || solution === null) {
        throw new Error("Missing the required parameter 'solution' when calling createSolution");
      }

      let pathParams = {
        'organization_id': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Solution;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/solutions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSolution operation.
     * @callback module:api/SolutionApi~deleteSolutionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Solution} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a solution
     * @param {String} organizationId the Organization identifier
     * @param {String} solutionId the Solution identifier
     * @param {module:api/SolutionApi~deleteSolutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Solution}
     */
    deleteSolution(organizationId, solutionId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteSolution");
      }
      // verify the required parameter 'solutionId' is set
      if (solutionId === undefined || solutionId === null) {
        throw new Error("Missing the required parameter 'solutionId' when calling deleteSolution");
      }

      let pathParams = {
        'organization_id': organizationId,
        'solution_id': solutionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Solution;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/solutions/{solution_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findAllSolutions operation.
     * @callback module:api/SolutionApi~findAllSolutionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Solution>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all Solutions
     * @param {String} organizationId the Organization identifier
     * @param {module:api/SolutionApi~findAllSolutionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Solution>}
     */
    findAllSolutions(organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling findAllSolutions");
      }

      let pathParams = {
        'organization_id': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Solution];
      return this.apiClient.callApi(
        '/organizations/{organization_id}/solutions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findSolutionById operation.
     * @callback module:api/SolutionApi~findSolutionByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Solution} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the details of a solution
     * @param {String} organizationId the Organization identifier
     * @param {String} solutionId the Solution identifier
     * @param {module:api/SolutionApi~findSolutionByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Solution}
     */
    findSolutionById(organizationId, solutionId, callback) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling findSolutionById");
      }
      // verify the required parameter 'solutionId' is set
      if (solutionId === undefined || solutionId === null) {
        throw new Error("Missing the required parameter 'solutionId' when calling findSolutionById");
      }

      let pathParams = {
        'organization_id': organizationId,
        'solution_id': solutionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Solution;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/solutions/{solution_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSolution operation.
     * @callback module:api/SolutionApi~updateSolutionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Solution} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a solution
     * @param {String} organizationId the Organization identifier
     * @param {String} solutionId the Solution identifier
     * @param {module:model/Solution} solution the new Solution details.
     * @param {module:api/SolutionApi~updateSolutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Solution}
     */
    updateSolution(organizationId, solutionId, solution, callback) {
      let postBody = solution;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateSolution");
      }
      // verify the required parameter 'solutionId' is set
      if (solutionId === undefined || solutionId === null) {
        throw new Error("Missing the required parameter 'solutionId' when calling updateSolution");
      }
      // verify the required parameter 'solution' is set
      if (solution === undefined || solution === null) {
        throw new Error("Missing the required parameter 'solution' when calling updateSolution");
      }

      let pathParams = {
        'organization_id': organizationId,
        'solution_id': solutionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Solution;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/solutions/{solution_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the upload operation.
     * @callback module:api/SolutionApi~uploadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Solution} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload and register a new solution
     * @param {String} organizationId the Organization identifier
     * @param {File} body the Solution to upload and register
     * @param {module:api/SolutionApi~uploadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Solution}
     */
    upload(organizationId, body, callback) {
      let postBody = body;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling upload");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling upload");
      }

      let pathParams = {
        'organization_id': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = ['application/yaml'];
      let accepts = ['application/json'];
      let returnType = Solution;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/solutions/upload', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
