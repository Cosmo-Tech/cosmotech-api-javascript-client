/**
 * Cosmo Tech Platform API
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 3.1.7
 * Contact: platform@cosmotech.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Runner from '../model/Runner';
import RunnerAccessControl from '../model/RunnerAccessControl';
import RunnerLastRun from '../model/RunnerLastRun';
import RunnerRole from '../model/RunnerRole';
import RunnerSecurity from '../model/RunnerSecurity';

/**
* Runner service.
* @module api/RunnerApi
* @version 3.1.7
*/
export default class RunnerApi {

    /**
    * Constructs a new RunnerApi. 
    * @alias module:api/RunnerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Add a control access to the Runner
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @param {String} runnerId the Runner identifier
     * @param {module:model/RunnerAccessControl} runnerAccessControl the new Runner security access to add.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RunnerAccessControl} and HTTP response
     */
    addRunnerAccessControlWithHttpInfo(organizationId, workspaceId, runnerId, runnerAccessControl) {
      let postBody = runnerAccessControl;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling addRunnerAccessControl");
      }
      // verify the required parameter 'workspaceId' is set
      if (workspaceId === undefined || workspaceId === null) {
        throw new Error("Missing the required parameter 'workspaceId' when calling addRunnerAccessControl");
      }
      // verify the required parameter 'runnerId' is set
      if (runnerId === undefined || runnerId === null) {
        throw new Error("Missing the required parameter 'runnerId' when calling addRunnerAccessControl");
      }
      // verify the required parameter 'runnerAccessControl' is set
      if (runnerAccessControl === undefined || runnerAccessControl === null) {
        throw new Error("Missing the required parameter 'runnerAccessControl' when calling addRunnerAccessControl");
      }

      let pathParams = {
        'organization_id': organizationId,
        'workspace_id': workspaceId,
        'runner_id': runnerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = ['application/json', 'application/yaml'];
      let accepts = ['application/json'];
      let returnType = RunnerAccessControl;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/workspaces/{workspace_id}/runners/{runner_id}/security/access', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Add a control access to the Runner
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @param {String} runnerId the Runner identifier
     * @param {module:model/RunnerAccessControl} runnerAccessControl the new Runner security access to add.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RunnerAccessControl}
     */
    addRunnerAccessControl(organizationId, workspaceId, runnerId, runnerAccessControl) {
      return this.addRunnerAccessControlWithHttpInfo(organizationId, workspaceId, runnerId, runnerAccessControl)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new Runner
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @param {module:model/Runner} runner the Runner to create
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Runner} and HTTP response
     */
    createRunnerWithHttpInfo(organizationId, workspaceId, runner) {
      let postBody = runner;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling createRunner");
      }
      // verify the required parameter 'workspaceId' is set
      if (workspaceId === undefined || workspaceId === null) {
        throw new Error("Missing the required parameter 'workspaceId' when calling createRunner");
      }
      // verify the required parameter 'runner' is set
      if (runner === undefined || runner === null) {
        throw new Error("Missing the required parameter 'runner' when calling createRunner");
      }

      let pathParams = {
        'organization_id': organizationId,
        'workspace_id': workspaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = ['application/json', 'application/yaml'];
      let accepts = ['application/json'];
      let returnType = Runner;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/workspaces/{workspace_id}/runners', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a new Runner
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @param {module:model/Runner} runner the Runner to create
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Runner}
     */
    createRunner(organizationId, workspaceId, runner) {
      return this.createRunnerWithHttpInfo(organizationId, workspaceId, runner)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a runner
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @param {String} runnerId the Runner identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteRunnerWithHttpInfo(organizationId, workspaceId, runnerId) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteRunner");
      }
      // verify the required parameter 'workspaceId' is set
      if (workspaceId === undefined || workspaceId === null) {
        throw new Error("Missing the required parameter 'workspaceId' when calling deleteRunner");
      }
      // verify the required parameter 'runnerId' is set
      if (runnerId === undefined || runnerId === null) {
        throw new Error("Missing the required parameter 'runnerId' when calling deleteRunner");
      }

      let pathParams = {
        'organization_id': organizationId,
        'workspace_id': workspaceId,
        'runner_id': runnerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/workspaces/{workspace_id}/runners/{runner_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a runner
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @param {String} runnerId the Runner identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteRunner(organizationId, workspaceId, runnerId) {
      return this.deleteRunnerWithHttpInfo(organizationId, workspaceId, runnerId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the details of an runner
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @param {String} runnerId the Runner identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Runner} and HTTP response
     */
    getRunnerWithHttpInfo(organizationId, workspaceId, runnerId) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getRunner");
      }
      // verify the required parameter 'workspaceId' is set
      if (workspaceId === undefined || workspaceId === null) {
        throw new Error("Missing the required parameter 'workspaceId' when calling getRunner");
      }
      // verify the required parameter 'runnerId' is set
      if (runnerId === undefined || runnerId === null) {
        throw new Error("Missing the required parameter 'runnerId' when calling getRunner");
      }

      let pathParams = {
        'organization_id': organizationId,
        'workspace_id': workspaceId,
        'runner_id': runnerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Runner;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/workspaces/{workspace_id}/runners/{runner_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get the details of an runner
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @param {String} runnerId the Runner identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Runner}
     */
    getRunner(organizationId, workspaceId, runnerId) {
      return this.getRunnerWithHttpInfo(organizationId, workspaceId, runnerId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a control access for the Runner
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @param {String} runnerId the Runner identifier
     * @param {String} identityId the User identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RunnerAccessControl} and HTTP response
     */
    getRunnerAccessControlWithHttpInfo(organizationId, workspaceId, runnerId, identityId) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getRunnerAccessControl");
      }
      // verify the required parameter 'workspaceId' is set
      if (workspaceId === undefined || workspaceId === null) {
        throw new Error("Missing the required parameter 'workspaceId' when calling getRunnerAccessControl");
      }
      // verify the required parameter 'runnerId' is set
      if (runnerId === undefined || runnerId === null) {
        throw new Error("Missing the required parameter 'runnerId' when calling getRunnerAccessControl");
      }
      // verify the required parameter 'identityId' is set
      if (identityId === undefined || identityId === null) {
        throw new Error("Missing the required parameter 'identityId' when calling getRunnerAccessControl");
      }

      let pathParams = {
        'organization_id': organizationId,
        'workspace_id': workspaceId,
        'runner_id': runnerId,
        'identity_id': identityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RunnerAccessControl;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/workspaces/{workspace_id}/runners/{runner_id}/security/access/{identity_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a control access for the Runner
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @param {String} runnerId the Runner identifier
     * @param {String} identityId the User identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RunnerAccessControl}
     */
    getRunnerAccessControl(organizationId, workspaceId, runnerId, identityId) {
      return this.getRunnerAccessControlWithHttpInfo(organizationId, workspaceId, runnerId, identityId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the Runner permission by given role
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @param {String} runnerId the Runner identifier
     * @param {String} role the Role
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    getRunnerPermissionsWithHttpInfo(organizationId, workspaceId, runnerId, role) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getRunnerPermissions");
      }
      // verify the required parameter 'workspaceId' is set
      if (workspaceId === undefined || workspaceId === null) {
        throw new Error("Missing the required parameter 'workspaceId' when calling getRunnerPermissions");
      }
      // verify the required parameter 'runnerId' is set
      if (runnerId === undefined || runnerId === null) {
        throw new Error("Missing the required parameter 'runnerId' when calling getRunnerPermissions");
      }
      // verify the required parameter 'role' is set
      if (role === undefined || role === null) {
        throw new Error("Missing the required parameter 'role' when calling getRunnerPermissions");
      }

      let pathParams = {
        'organization_id': organizationId,
        'workspace_id': workspaceId,
        'runner_id': runnerId,
        'role': role
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/organizations/{organization_id}/workspaces/{workspace_id}/runners/{runner_id}/permissions/{role}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get the Runner permission by given role
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @param {String} runnerId the Runner identifier
     * @param {String} role the Role
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    getRunnerPermissions(organizationId, workspaceId, runnerId, role) {
      return this.getRunnerPermissionsWithHttpInfo(organizationId, workspaceId, runnerId, role)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the Runner security information
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @param {String} runnerId the Runner identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RunnerSecurity} and HTTP response
     */
    getRunnerSecurityWithHttpInfo(organizationId, workspaceId, runnerId) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getRunnerSecurity");
      }
      // verify the required parameter 'workspaceId' is set
      if (workspaceId === undefined || workspaceId === null) {
        throw new Error("Missing the required parameter 'workspaceId' when calling getRunnerSecurity");
      }
      // verify the required parameter 'runnerId' is set
      if (runnerId === undefined || runnerId === null) {
        throw new Error("Missing the required parameter 'runnerId' when calling getRunnerSecurity");
      }

      let pathParams = {
        'organization_id': organizationId,
        'workspace_id': workspaceId,
        'runner_id': runnerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RunnerSecurity;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/workspaces/{workspace_id}/runners/{runner_id}/security', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get the Runner security information
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @param {String} runnerId the Runner identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RunnerSecurity}
     */
    getRunnerSecurity(organizationId, workspaceId, runnerId) {
      return this.getRunnerSecurityWithHttpInfo(organizationId, workspaceId, runnerId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the Runner security users list
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @param {String} runnerId the Runner identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    getRunnerSecurityUsersWithHttpInfo(organizationId, workspaceId, runnerId) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getRunnerSecurityUsers");
      }
      // verify the required parameter 'workspaceId' is set
      if (workspaceId === undefined || workspaceId === null) {
        throw new Error("Missing the required parameter 'workspaceId' when calling getRunnerSecurityUsers");
      }
      // verify the required parameter 'runnerId' is set
      if (runnerId === undefined || runnerId === null) {
        throw new Error("Missing the required parameter 'runnerId' when calling getRunnerSecurityUsers");
      }

      let pathParams = {
        'organization_id': organizationId,
        'workspace_id': workspaceId,
        'runner_id': runnerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/organizations/{organization_id}/workspaces/{workspace_id}/runners/{runner_id}/security/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get the Runner security users list
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @param {String} runnerId the Runner identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    getRunnerSecurityUsers(organizationId, workspaceId, runnerId) {
      return this.getRunnerSecurityUsersWithHttpInfo(organizationId, workspaceId, runnerId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all Runners
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page page number to query
     * @param {Number} opts.size amount of result by page
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Runner>} and HTTP response
     */
    listRunnersWithHttpInfo(organizationId, workspaceId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling listRunners");
      }
      // verify the required parameter 'workspaceId' is set
      if (workspaceId === undefined || workspaceId === null) {
        throw new Error("Missing the required parameter 'workspaceId' when calling listRunners");
      }

      let pathParams = {
        'organization_id': organizationId,
        'workspace_id': workspaceId
      };
      let queryParams = {
        'page': opts['page'],
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Runner];
      return this.apiClient.callApi(
        '/organizations/{organization_id}/workspaces/{workspace_id}/runners', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List all Runners
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page page number to query
     * @param {Number} opts.size amount of result by page
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Runner>}
     */
    listRunners(organizationId, workspaceId, opts) {
      return this.listRunnersWithHttpInfo(organizationId, workspaceId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove the specified access from the given Organization Runner
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @param {String} runnerId the Runner identifier
     * @param {String} identityId the User identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeRunnerAccessControlWithHttpInfo(organizationId, workspaceId, runnerId, identityId) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling removeRunnerAccessControl");
      }
      // verify the required parameter 'workspaceId' is set
      if (workspaceId === undefined || workspaceId === null) {
        throw new Error("Missing the required parameter 'workspaceId' when calling removeRunnerAccessControl");
      }
      // verify the required parameter 'runnerId' is set
      if (runnerId === undefined || runnerId === null) {
        throw new Error("Missing the required parameter 'runnerId' when calling removeRunnerAccessControl");
      }
      // verify the required parameter 'identityId' is set
      if (identityId === undefined || identityId === null) {
        throw new Error("Missing the required parameter 'identityId' when calling removeRunnerAccessControl");
      }

      let pathParams = {
        'organization_id': organizationId,
        'workspace_id': workspaceId,
        'runner_id': runnerId,
        'identity_id': identityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/workspaces/{workspace_id}/runners/{runner_id}/security/access/{identity_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove the specified access from the given Organization Runner
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @param {String} runnerId the Runner identifier
     * @param {String} identityId the User identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeRunnerAccessControl(organizationId, workspaceId, runnerId, identityId) {
      return this.removeRunnerAccessControlWithHttpInfo(organizationId, workspaceId, runnerId, identityId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Set the Runner default security
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @param {String} runnerId the Runner identifier
     * @param {module:model/RunnerRole} runnerRole This change the runner default security. The default security is the role assigned to any person not on the Access Control List. If the default security is None, then nobody outside of the ACL can access the runner.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RunnerSecurity} and HTTP response
     */
    setRunnerDefaultSecurityWithHttpInfo(organizationId, workspaceId, runnerId, runnerRole) {
      let postBody = runnerRole;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling setRunnerDefaultSecurity");
      }
      // verify the required parameter 'workspaceId' is set
      if (workspaceId === undefined || workspaceId === null) {
        throw new Error("Missing the required parameter 'workspaceId' when calling setRunnerDefaultSecurity");
      }
      // verify the required parameter 'runnerId' is set
      if (runnerId === undefined || runnerId === null) {
        throw new Error("Missing the required parameter 'runnerId' when calling setRunnerDefaultSecurity");
      }
      // verify the required parameter 'runnerRole' is set
      if (runnerRole === undefined || runnerRole === null) {
        throw new Error("Missing the required parameter 'runnerRole' when calling setRunnerDefaultSecurity");
      }

      let pathParams = {
        'organization_id': organizationId,
        'workspace_id': workspaceId,
        'runner_id': runnerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = ['application/json', 'application/yaml'];
      let accepts = ['application/json'];
      let returnType = RunnerSecurity;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/workspaces/{workspace_id}/runners/{runner_id}/security/default', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Set the Runner default security
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @param {String} runnerId the Runner identifier
     * @param {module:model/RunnerRole} runnerRole This change the runner default security. The default security is the role assigned to any person not on the Access Control List. If the default security is None, then nobody outside of the ACL can access the runner.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RunnerSecurity}
     */
    setRunnerDefaultSecurity(organizationId, workspaceId, runnerId, runnerRole) {
      return this.setRunnerDefaultSecurityWithHttpInfo(organizationId, workspaceId, runnerId, runnerRole)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Start a run with runner parameters
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @param {String} runnerId the Runner identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RunnerLastRun} and HTTP response
     */
    startRunWithHttpInfo(organizationId, workspaceId, runnerId) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling startRun");
      }
      // verify the required parameter 'workspaceId' is set
      if (workspaceId === undefined || workspaceId === null) {
        throw new Error("Missing the required parameter 'workspaceId' when calling startRun");
      }
      // verify the required parameter 'runnerId' is set
      if (runnerId === undefined || runnerId === null) {
        throw new Error("Missing the required parameter 'runnerId' when calling startRun");
      }

      let pathParams = {
        'organization_id': organizationId,
        'workspace_id': workspaceId,
        'runner_id': runnerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RunnerLastRun;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/workspaces/{workspace_id}/runners/{runner_id}/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Start a run with runner parameters
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @param {String} runnerId the Runner identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RunnerLastRun}
     */
    startRun(organizationId, workspaceId, runnerId) {
      return this.startRunWithHttpInfo(organizationId, workspaceId, runnerId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Stop the last run
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @param {String} runnerId the Runner identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    stopRunWithHttpInfo(organizationId, workspaceId, runnerId) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling stopRun");
      }
      // verify the required parameter 'workspaceId' is set
      if (workspaceId === undefined || workspaceId === null) {
        throw new Error("Missing the required parameter 'workspaceId' when calling stopRun");
      }
      // verify the required parameter 'runnerId' is set
      if (runnerId === undefined || runnerId === null) {
        throw new Error("Missing the required parameter 'runnerId' when calling stopRun");
      }

      let pathParams = {
        'organization_id': organizationId,
        'workspace_id': workspaceId,
        'runner_id': runnerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/workspaces/{workspace_id}/runners/{runner_id}/stop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Stop the last run
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @param {String} runnerId the Runner identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    stopRun(organizationId, workspaceId, runnerId) {
      return this.stopRunWithHttpInfo(organizationId, workspaceId, runnerId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a runner
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @param {String} runnerId the Runner identifier
     * @param {module:model/Runner} runner the new Runner details. This endpoint can't be used to update security
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Runner} and HTTP response
     */
    updateRunnerWithHttpInfo(organizationId, workspaceId, runnerId, runner) {
      let postBody = runner;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateRunner");
      }
      // verify the required parameter 'workspaceId' is set
      if (workspaceId === undefined || workspaceId === null) {
        throw new Error("Missing the required parameter 'workspaceId' when calling updateRunner");
      }
      // verify the required parameter 'runnerId' is set
      if (runnerId === undefined || runnerId === null) {
        throw new Error("Missing the required parameter 'runnerId' when calling updateRunner");
      }
      // verify the required parameter 'runner' is set
      if (runner === undefined || runner === null) {
        throw new Error("Missing the required parameter 'runner' when calling updateRunner");
      }

      let pathParams = {
        'organization_id': organizationId,
        'workspace_id': workspaceId,
        'runner_id': runnerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = ['application/json', 'application/yaml'];
      let accepts = ['application/json'];
      let returnType = Runner;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/workspaces/{workspace_id}/runners/{runner_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a runner
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @param {String} runnerId the Runner identifier
     * @param {module:model/Runner} runner the new Runner details. This endpoint can't be used to update security
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Runner}
     */
    updateRunner(organizationId, workspaceId, runnerId, runner) {
      return this.updateRunnerWithHttpInfo(organizationId, workspaceId, runnerId, runner)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update the specified access to User for a Runner
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @param {String} runnerId the Runner identifier
     * @param {String} identityId the User identifier
     * @param {module:model/RunnerRole} runnerRole The new Runner Access Control
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RunnerAccessControl} and HTTP response
     */
    updateRunnerAccessControlWithHttpInfo(organizationId, workspaceId, runnerId, identityId, runnerRole) {
      let postBody = runnerRole;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateRunnerAccessControl");
      }
      // verify the required parameter 'workspaceId' is set
      if (workspaceId === undefined || workspaceId === null) {
        throw new Error("Missing the required parameter 'workspaceId' when calling updateRunnerAccessControl");
      }
      // verify the required parameter 'runnerId' is set
      if (runnerId === undefined || runnerId === null) {
        throw new Error("Missing the required parameter 'runnerId' when calling updateRunnerAccessControl");
      }
      // verify the required parameter 'identityId' is set
      if (identityId === undefined || identityId === null) {
        throw new Error("Missing the required parameter 'identityId' when calling updateRunnerAccessControl");
      }
      // verify the required parameter 'runnerRole' is set
      if (runnerRole === undefined || runnerRole === null) {
        throw new Error("Missing the required parameter 'runnerRole' when calling updateRunnerAccessControl");
      }

      let pathParams = {
        'organization_id': organizationId,
        'workspace_id': workspaceId,
        'runner_id': runnerId,
        'identity_id': identityId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2AuthCode'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RunnerAccessControl;
      return this.apiClient.callApi(
        '/organizations/{organization_id}/workspaces/{workspace_id}/runners/{runner_id}/security/access/{identity_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update the specified access to User for a Runner
     * @param {String} organizationId the Organization identifier
     * @param {String} workspaceId the Workspace identifier
     * @param {String} runnerId the Runner identifier
     * @param {String} identityId the User identifier
     * @param {module:model/RunnerRole} runnerRole The new Runner Access Control
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RunnerAccessControl}
     */
    updateRunnerAccessControl(organizationId, workspaceId, runnerId, identityId, runnerRole) {
      return this.updateRunnerAccessControlWithHttpInfo(organizationId, workspaceId, runnerId, identityId, runnerRole)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
