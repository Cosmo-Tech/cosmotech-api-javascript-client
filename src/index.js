/**
 * Cosmo Tech Plaform API
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import AnalysisParameter from './model/AnalysisParameter';
import AnalysisParameterGroup from './model/AnalysisParameterGroup';
import AnalysisResourceStorage from './model/AnalysisResourceStorage';
import Connector from './model/Connector';
import ConnectorParameter from './model/ConnectorParameter';
import ConnectorParameterGroup from './model/ConnectorParameterGroup';
import Dataset from './model/Dataset';
import DatasetCompatibility from './model/DatasetCompatibility';
import DatasetConnector from './model/DatasetConnector';
import DatasetCopyParameters from './model/DatasetCopyParameters';
import Organization from './model/Organization';
import OrganizationUser from './model/OrganizationUser';
import Scenario from './model/Scenario';
import ScenarioAllOf from './model/ScenarioAllOf';
import ScenarioAnalysis from './model/ScenarioAnalysis';
import ScenarioAnalysisParameterValue from './model/ScenarioAnalysisParameterValue';
import ScenarioBase from './model/ScenarioBase';
import ScenarioChangedParameterValue from './model/ScenarioChangedParameterValue';
import ScenarioComparisonResult from './model/ScenarioComparisonResult';
import ScenarioDataWarehouseQuery from './model/ScenarioDataWarehouseQuery';
import ScenarioDataWarehouseQueryResult from './model/ScenarioDataWarehouseQueryResult';
import ScenarioFailedAnalysis from './model/ScenarioFailedAnalysis';
import ScenarioFailedAnalysisAllOf from './model/ScenarioFailedAnalysisAllOf';
import ScenarioRunningAnalysis from './model/ScenarioRunningAnalysis';
import ScenarioRunningAnalysisAllOf from './model/ScenarioRunningAnalysisAllOf';
import ScenarioSuccessfulAnalysis from './model/ScenarioSuccessfulAnalysis';
import ScenarioSuccessfulAnalysisAllOf from './model/ScenarioSuccessfulAnalysisAllOf';
import ScenarioUser from './model/ScenarioUser';
import Simulator from './model/Simulator';
import SimulatorAnalysis from './model/SimulatorAnalysis';
import User from './model/User';
import UserDetails from './model/UserDetails';
import UserDetailsAllOf from './model/UserDetailsAllOf';
import UserOrganization from './model/UserOrganization';
import Validator from './model/Validator';
import ValidatorRun from './model/ValidatorRun';
import Workspace from './model/Workspace';
import WorkspaceServices from './model/WorkspaceServices';
import WorkspaceSimulator from './model/WorkspaceSimulator';
import WorkspaceUser from './model/WorkspaceUser';
import WorkspaceWebApp from './model/WorkspaceWebApp';
import ConnectorApi from './api/ConnectorApi';
import DatasetApi from './api/DatasetApi';
import OrganizationApi from './api/OrganizationApi';
import ScenarioApi from './api/ScenarioApi';
import SimulatorApi from './api/SimulatorApi';
import UserApi from './api/UserApi';
import ValidatorApi from './api/ValidatorApi';
import WorkspaceApi from './api/WorkspaceApi';


/**
* Cosmo Tech Platform API client.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var CosmotechApi = require('index'); // See note below*.
* var xxxSvc = new CosmotechApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new CosmotechApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new CosmotechApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new CosmotechApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 0.0.1-SNAPSHOT
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The AnalysisParameter model constructor.
     * @property {module:model/AnalysisParameter}
     */
    AnalysisParameter,

    /**
     * The AnalysisParameterGroup model constructor.
     * @property {module:model/AnalysisParameterGroup}
     */
    AnalysisParameterGroup,

    /**
     * The AnalysisResourceStorage model constructor.
     * @property {module:model/AnalysisResourceStorage}
     */
    AnalysisResourceStorage,

    /**
     * The Connector model constructor.
     * @property {module:model/Connector}
     */
    Connector,

    /**
     * The ConnectorParameter model constructor.
     * @property {module:model/ConnectorParameter}
     */
    ConnectorParameter,

    /**
     * The ConnectorParameterGroup model constructor.
     * @property {module:model/ConnectorParameterGroup}
     */
    ConnectorParameterGroup,

    /**
     * The Dataset model constructor.
     * @property {module:model/Dataset}
     */
    Dataset,

    /**
     * The DatasetCompatibility model constructor.
     * @property {module:model/DatasetCompatibility}
     */
    DatasetCompatibility,

    /**
     * The DatasetConnector model constructor.
     * @property {module:model/DatasetConnector}
     */
    DatasetConnector,

    /**
     * The DatasetCopyParameters model constructor.
     * @property {module:model/DatasetCopyParameters}
     */
    DatasetCopyParameters,

    /**
     * The Organization model constructor.
     * @property {module:model/Organization}
     */
    Organization,

    /**
     * The OrganizationUser model constructor.
     * @property {module:model/OrganizationUser}
     */
    OrganizationUser,

    /**
     * The Scenario model constructor.
     * @property {module:model/Scenario}
     */
    Scenario,

    /**
     * The ScenarioAllOf model constructor.
     * @property {module:model/ScenarioAllOf}
     */
    ScenarioAllOf,

    /**
     * The ScenarioAnalysis model constructor.
     * @property {module:model/ScenarioAnalysis}
     */
    ScenarioAnalysis,

    /**
     * The ScenarioAnalysisParameterValue model constructor.
     * @property {module:model/ScenarioAnalysisParameterValue}
     */
    ScenarioAnalysisParameterValue,

    /**
     * The ScenarioBase model constructor.
     * @property {module:model/ScenarioBase}
     */
    ScenarioBase,

    /**
     * The ScenarioChangedParameterValue model constructor.
     * @property {module:model/ScenarioChangedParameterValue}
     */
    ScenarioChangedParameterValue,

    /**
     * The ScenarioComparisonResult model constructor.
     * @property {module:model/ScenarioComparisonResult}
     */
    ScenarioComparisonResult,

    /**
     * The ScenarioDataWarehouseQuery model constructor.
     * @property {module:model/ScenarioDataWarehouseQuery}
     */
    ScenarioDataWarehouseQuery,

    /**
     * The ScenarioDataWarehouseQueryResult model constructor.
     * @property {module:model/ScenarioDataWarehouseQueryResult}
     */
    ScenarioDataWarehouseQueryResult,

    /**
     * The ScenarioFailedAnalysis model constructor.
     * @property {module:model/ScenarioFailedAnalysis}
     */
    ScenarioFailedAnalysis,

    /**
     * The ScenarioFailedAnalysisAllOf model constructor.
     * @property {module:model/ScenarioFailedAnalysisAllOf}
     */
    ScenarioFailedAnalysisAllOf,

    /**
     * The ScenarioRunningAnalysis model constructor.
     * @property {module:model/ScenarioRunningAnalysis}
     */
    ScenarioRunningAnalysis,

    /**
     * The ScenarioRunningAnalysisAllOf model constructor.
     * @property {module:model/ScenarioRunningAnalysisAllOf}
     */
    ScenarioRunningAnalysisAllOf,

    /**
     * The ScenarioSuccessfulAnalysis model constructor.
     * @property {module:model/ScenarioSuccessfulAnalysis}
     */
    ScenarioSuccessfulAnalysis,

    /**
     * The ScenarioSuccessfulAnalysisAllOf model constructor.
     * @property {module:model/ScenarioSuccessfulAnalysisAllOf}
     */
    ScenarioSuccessfulAnalysisAllOf,

    /**
     * The ScenarioUser model constructor.
     * @property {module:model/ScenarioUser}
     */
    ScenarioUser,

    /**
     * The Simulator model constructor.
     * @property {module:model/Simulator}
     */
    Simulator,

    /**
     * The SimulatorAnalysis model constructor.
     * @property {module:model/SimulatorAnalysis}
     */
    SimulatorAnalysis,

    /**
     * The User model constructor.
     * @property {module:model/User}
     */
    User,

    /**
     * The UserDetails model constructor.
     * @property {module:model/UserDetails}
     */
    UserDetails,

    /**
     * The UserDetailsAllOf model constructor.
     * @property {module:model/UserDetailsAllOf}
     */
    UserDetailsAllOf,

    /**
     * The UserOrganization model constructor.
     * @property {module:model/UserOrganization}
     */
    UserOrganization,

    /**
     * The Validator model constructor.
     * @property {module:model/Validator}
     */
    Validator,

    /**
     * The ValidatorRun model constructor.
     * @property {module:model/ValidatorRun}
     */
    ValidatorRun,

    /**
     * The Workspace model constructor.
     * @property {module:model/Workspace}
     */
    Workspace,

    /**
     * The WorkspaceServices model constructor.
     * @property {module:model/WorkspaceServices}
     */
    WorkspaceServices,

    /**
     * The WorkspaceSimulator model constructor.
     * @property {module:model/WorkspaceSimulator}
     */
    WorkspaceSimulator,

    /**
     * The WorkspaceUser model constructor.
     * @property {module:model/WorkspaceUser}
     */
    WorkspaceUser,

    /**
     * The WorkspaceWebApp model constructor.
     * @property {module:model/WorkspaceWebApp}
     */
    WorkspaceWebApp,

    /**
    * The ConnectorApi service constructor.
    * @property {module:api/ConnectorApi}
    */
    ConnectorApi,

    /**
    * The DatasetApi service constructor.
    * @property {module:api/DatasetApi}
    */
    DatasetApi,

    /**
    * The OrganizationApi service constructor.
    * @property {module:api/OrganizationApi}
    */
    OrganizationApi,

    /**
    * The ScenarioApi service constructor.
    * @property {module:api/ScenarioApi}
    */
    ScenarioApi,

    /**
    * The SimulatorApi service constructor.
    * @property {module:api/SimulatorApi}
    */
    SimulatorApi,

    /**
    * The UserApi service constructor.
    * @property {module:api/UserApi}
    */
    UserApi,

    /**
    * The ValidatorApi service constructor.
    * @property {module:api/ValidatorApi}
    */
    ValidatorApi,

    /**
    * The WorkspaceApi service constructor.
    * @property {module:api/WorkspaceApi}
    */
    WorkspaceApi
};
