/**
 * Cosmo Tech Plaform API
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CosmotechApi);
  }
}(this, function(expect, CosmotechApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CosmotechApi.ScenariorunApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ScenariorunApi', function() {
    describe('deleteScenarioRun', function() {
      it('should call deleteScenarioRun successfully', function(done) {
        //uncomment below and update the code to test deleteScenarioRun
        //instance.deleteScenarioRun(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findScenarioRunById', function() {
      it('should call findScenarioRunById successfully', function(done) {
        //uncomment below and update the code to test findScenarioRunById
        //instance.findScenarioRunById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getScenarioScenarioRun', function() {
      it('should call getScenarioScenarioRun successfully', function(done) {
        //uncomment below and update the code to test getScenarioScenarioRun
        //instance.getScenarioScenarioRun(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getScenarioScenarioRunLogs', function() {
      it('should call getScenarioScenarioRunLogs successfully', function(done) {
        //uncomment below and update the code to test getScenarioScenarioRunLogs
        //instance.getScenarioScenarioRunLogs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getScenarioScenarioRuns', function() {
      it('should call getScenarioScenarioRuns successfully', function(done) {
        //uncomment below and update the code to test getScenarioScenarioRuns
        //instance.getScenarioScenarioRuns(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getWorkspaceScenarioRuns', function() {
      it('should call getWorkspaceScenarioRuns successfully', function(done) {
        //uncomment below and update the code to test getWorkspaceScenarioRuns
        //instance.getWorkspaceScenarioRuns(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('runScenario', function() {
      it('should call runScenario successfully', function(done) {
        //uncomment below and update the code to test runScenario
        //instance.runScenario(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchScenarioRunLogs', function() {
      it('should call searchScenarioRunLogs successfully', function(done) {
        //uncomment below and update the code to test searchScenarioRunLogs
        //instance.searchScenarioRunLogs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchScenarioRuns', function() {
      it('should call searchScenarioRuns successfully', function(done) {
        //uncomment below and update the code to test searchScenarioRuns
        //instance.searchScenarioRuns(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startScenarioRunContainers', function() {
      it('should call startScenarioRunContainers successfully', function(done) {
        //uncomment below and update the code to test startScenarioRunContainers
        //instance.startScenarioRunContainers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startScenarioRunScenario', function() {
      it('should call startScenarioRunScenario successfully', function(done) {
        //uncomment below and update the code to test startScenarioRunScenario
        //instance.startScenarioRunScenario(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startScenarioRunSolution', function() {
      it('should call startScenarioRunSolution successfully', function(done) {
        //uncomment below and update the code to test startScenarioRunSolution
        //instance.startScenarioRunSolution(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
