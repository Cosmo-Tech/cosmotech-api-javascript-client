/**
 * Cosmo Tech Plaform API
 * Cosmo Tech Platform API
 *
 * The version of the OpenAPI document: 0.0.1-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CosmotechApi);
  }
}(this, function(expect, CosmotechApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CosmotechApi.SimulationApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SimulationApi', function() {
    describe('deleteSimulation', function() {
      it('should call deleteSimulation successfully', function(done) {
        //uncomment below and update the code to test deleteSimulation
        //instance.deleteSimulation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findSimulationById', function() {
      it('should call findSimulationById successfully', function(done) {
        //uncomment below and update the code to test findSimulationById
        //instance.findSimulationById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getScenarioSimulation', function() {
      it('should call getScenarioSimulation successfully', function(done) {
        //uncomment below and update the code to test getScenarioSimulation
        //instance.getScenarioSimulation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getScenarioSimulationLogs', function() {
      it('should call getScenarioSimulationLogs successfully', function(done) {
        //uncomment below and update the code to test getScenarioSimulationLogs
        //instance.getScenarioSimulationLogs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getScenarioSimulations', function() {
      it('should call getScenarioSimulations successfully', function(done) {
        //uncomment below and update the code to test getScenarioSimulations
        //instance.getScenarioSimulations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getWorkspaceSimulations', function() {
      it('should call getWorkspaceSimulations successfully', function(done) {
        //uncomment below and update the code to test getWorkspaceSimulations
        //instance.getWorkspaceSimulations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('runScenario', function() {
      it('should call runScenario successfully', function(done) {
        //uncomment below and update the code to test runScenario
        //instance.runScenario(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchSimulationLogs', function() {
      it('should call searchSimulationLogs successfully', function(done) {
        //uncomment below and update the code to test searchSimulationLogs
        //instance.searchSimulationLogs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchSimulations', function() {
      it('should call searchSimulations successfully', function(done) {
        //uncomment below and update the code to test searchSimulations
        //instance.searchSimulations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startSimulationContainers', function() {
      it('should call startSimulationContainers successfully', function(done) {
        //uncomment below and update the code to test startSimulationContainers
        //instance.startSimulationContainers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startSimulationScenario', function() {
      it('should call startSimulationScenario successfully', function(done) {
        //uncomment below and update the code to test startSimulationScenario
        //instance.startSimulationScenario(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startSimulationSimulator', function() {
      it('should call startSimulationSimulator successfully', function(done) {
        //uncomment below and update the code to test startSimulationSimulator
        //instance.startSimulationSimulator(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
